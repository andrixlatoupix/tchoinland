class TchoinlandApp {
    constructor() {
        this.currentGame = null;
        // R√©cup√©rer la pr√©f√©rence de musique sauvegard√©e (par d√©faut activ√©e pour les vraies tchoin ! üíÖ)
        this.musicEnabled = localStorage.getItem('tchoinMusicEnabled') !== 'false';
        this.audioRetryCount = 0;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.setupMusic();
        this.addRandomSparkles();
        this.updateMusicButton();
        this.setupRandomPhotos();
        console.log('ü¶Ñ Bienvenue dans Tchoinland.fun ! üíÖ');
    }

    setupEventListeners() {
        // Game card clicks
        document.querySelectorAll('.game-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const gameType = card.getAttribute('data-game');
                this.playClickSound();
                this.openGame(gameType);
            });
        });

        // Back button
        document.getElementById('backBtn').addEventListener('click', () => {
            this.playClickSound();
            this.closeGame();
        });

        // Music toggle
        document.getElementById('musicToggle').addEventListener('click', () => {
            this.toggleMusic();
        });

        // Add click sound to bouncy text
        document.querySelector('.bouncy-text').addEventListener('click', () => {
            this.playTchoinSound();
        });
    }

    setupMusic() {
        // Gestion de la playlist tchoin üéµüëë
        this.backgroundMusic = document.getElementById('backgroundMusic');
        this.musicLoaded = false;
        
        // Playlist des chansons tchoin (dossier musique)
        this.tchoinPlaylist = [
            "musique/Reine de la Tchoin.mp3",
            "musique/tchoin tchoin tchoin tchoin tchoin tchoi.mp3", 
            "musique/tchoin tchoin tchoin tchoin tchoin tchoi (1).mp3",
            "musique/tchoin tchoin tchoin tchoin tchoin tchoi (2).mp3"
        ];
        this.currentSongIndex = 0;
        this.songPlayCount = {}; // Compteur pour √©viter plus de 2 r√©p√©titions
        this.availableSongs = [...this.tchoinPlaylist]; // Songs disponibles
        
        // Web Audio Context pour les effets sonores (cr√©√© seulement apr√®s interaction)
        this.audioContext = null;
        this.audioContextInitialized = false;

        // Quand la musique est charg√©e, on configure le d√©marrage al√©atoire
        this.backgroundMusic.addEventListener('loadedmetadata', () => {
            this.musicLoaded = true;
            console.log('üéµüëë "Reine de la Tchoin" charg√©e ! Dur√©e:', Math.round(this.backgroundMusic.duration), 'secondes de pur d√©lire ! üíÖ‚ú®');
        });

        // G√©rer les erreurs de chargement
        this.backgroundMusic.addEventListener('error', (e) => {
            console.log('üéµ‚ùå Erreur de chargement de la musique:', e);
            console.log('V√©rifiez que le fichier "Reine de la Tchoin.mp3" existe dans le dossier !');
        });

        // D√©tecter quand la musique commence vraiment √† jouer
        this.backgroundMusic.addEventListener('playing', () => {
            console.log('üéµüéâ "Reine de la Tchoin" est maintenant en cours de lecture !');
        });

        // Quand la musique se termine, on passe √† la suivante
        this.backgroundMusic.addEventListener('ended', () => {
            console.log('üéµ‚ú® Chanson termin√©e ! On passe au hit suivant ! üíÖüî•');
            this.playNextSong();
        });

        // Auto-play quand possible (apr√®s interaction utilisateur)
        document.addEventListener('click', this.handleFirstUserInteraction.bind(this), { once: true });
        document.addEventListener('touchstart', this.handleFirstUserInteraction.bind(this), { once: true });
    }

    handleFirstUserInteraction() {
        console.log('üéµ Premi√®re interaction utilisateur d√©tect√©e !');
        this.initializeAudioContext();
        this.tryAutoPlay();
    }

    initializeAudioContext() {
        if (!this.audioContextInitialized) {
            try {
                this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                this.audioContextInitialized = true;
                console.log('üéµ AudioContext cr√©√© avec succ√®s !');
            } catch (e) {
                console.log('üéµ‚ùå AudioContext non support√©:', e);
            }
        }
    }

    tryAutoPlay() {
        console.log('üéµ Tentative de d√©marrage audio automatique...');
        
        // Activer l'audio context si suspendu
        if (this.audioContext && this.audioContext.state === 'suspended') {
            this.audioContext.resume().then(() => {
                console.log('üéµ Audio context activ√© !');
            });
        }
        
        // D√©marrer la musique si activ√©e
        if (this.musicEnabled && this.musicLoaded) {
            this.startRandomSong();
        } else if (this.musicEnabled && !this.musicLoaded) {
            // Si la musique n'est pas encore charg√©e, attendre une seule fois
            if (!this.audioRetryCount) {
                this.audioRetryCount = 0;
            }
            if (this.audioRetryCount < 3) {
                this.audioRetryCount++;
                setTimeout(() => this.tryAutoPlay(), 1000);
            }
        }
    }

    startRandomSong() {
        // Choisir une chanson al√©atoire au d√©marrage
        this.currentSongIndex = Math.floor(Math.random() * this.tchoinPlaylist.length);
        const randomSong = this.tchoinPlaylist[this.currentSongIndex];
        
        // Incr√©menter le compteur pour cette chanson
        this.songPlayCount[randomSong] = (this.songPlayCount[randomSong] || 0) + 1;
        
        console.log('üéµüé≤ Chanson al√©atoire s√©lectionn√©e:', randomSong, `(jou√©e ${this.songPlayCount[randomSong]} fois)`);
        
        this.backgroundMusic.src = randomSong;
        this.backgroundMusic.load();
        
        this.backgroundMusic.addEventListener('loadedmetadata', () => {
            // Position al√©atoire dans la chanson
            const randomPosition = Math.random() * (this.backgroundMusic.duration - 30);
            this.backgroundMusic.currentTime = randomPosition;
            console.log('üéµ‚èØÔ∏è D√©marrage √† la position:', Math.round(randomPosition), 'secondes');
            
            this.backgroundMusic.play().catch(e => {
                console.log('üéµ‚ùå Lecture bloqu√©e par le navigateur:', e);
            });
        }, { once: true });
    }
    
    playNextSong() {
        // Filtrer les chansons jou√©es moins de 2 fois
        let availableSongs = this.tchoinPlaylist.filter(song => 
            (this.songPlayCount[song] || 0) < 2
        );
        
        // Si toutes les chansons ont √©t√© jou√©es 2 fois, reset le compteur
        if (availableSongs.length === 0) {
            console.log('üéµüîÑ Reset du compteur - toutes les chansons jou√©es 2 fois !');
            this.songPlayCount = {};
            availableSongs = [...this.tchoinPlaylist];
        }
        
        // √âviter la m√™me chanson que la pr√©c√©dente si possible
        const currentSong = this.tchoinPlaylist[this.currentSongIndex];
        const otherSongs = availableSongs.filter(song => song !== currentSong);
        const songsToChooseFrom = otherSongs.length > 0 ? otherSongs : availableSongs;
        
        // Choisir une chanson al√©atoire
        const nextSong = songsToChooseFrom[Math.floor(Math.random() * songsToChooseFrom.length)];
        this.currentSongIndex = this.tchoinPlaylist.indexOf(nextSong);
        
        // Incr√©menter le compteur
        this.songPlayCount[nextSong] = (this.songPlayCount[nextSong] || 0) + 1;
        
        console.log('üéµ‚è≠Ô∏è Chanson suivante:', nextSong, `(jou√©e ${this.songPlayCount[nextSong]} fois)`);
        
        this.backgroundMusic.src = nextSong;
        this.backgroundMusic.load();
        
        this.backgroundMusic.addEventListener('loadedmetadata', () => {
            // Position al√©atoire dans la nouvelle chanson
            const randomPosition = Math.random() * (this.backgroundMusic.duration - 30);
            this.backgroundMusic.currentTime = randomPosition;
            
            this.backgroundMusic.play().catch(e => {
                console.log('üéµ‚ùå Lecture suivante bloqu√©e:', e);
            });
        }, { once: true });
    }

    startMusicFromRandomPosition() {
        if (!this.backgroundMusic || !this.musicLoaded) {
            console.log('üéµ‚ùå Musique non disponible - backgroundMusic:', !!this.backgroundMusic, 'musicLoaded:', this.musicLoaded);
            return;
        }
        
        const duration = this.backgroundMusic.duration;
        if (duration && duration > 0) {
            // Position al√©atoire entre 0 et les 3/4 de la musique 
            // (pour √©viter de commencer trop pr√®s de la fin)
            const randomPosition = Math.random() * (duration * 0.75);
            
            const funMessages = [
                `üéµüíÖ "Reine de la Tchoin" d√©marre √† ${Math.round(randomPosition)}s ! Pr√©pare-toi √† slayer ! ‚ú®`,
                `üéµüëë Le hit commence √† ${Math.round(randomPosition)}s ! Tes oreilles vont √™tre b√©nies ! üíñ`,
                `üéµüî• ${Math.round(randomPosition)}s de pur bonheur musical qui t'attend ! Let's go ! üöÄ`,
                `üéµ‚ú® Random start √† ${Math.round(randomPosition)}s parce qu'on est des rebelles ! üíÖ`,
                `üéµü¶Ñ La m√©lodie divine commence √† ${Math.round(randomPosition)}s ! Pr√©pare ton √¢me ! üëë`
            ];
            console.log(funMessages[Math.floor(Math.random() * funMessages.length)]);
            
            try {
                this.backgroundMusic.currentTime = randomPosition;
                this.backgroundMusic.volume = 0.7; // Volume √† 70%
                
                this.backgroundMusic.play().then(() => {
                    console.log('üéµ‚úÖ Musique d√©marr√©e avec succ√®s !');
                    this.updateMusicButton();
                }).catch(e => {
                    console.log('üéµ‚ùå Lecture bloqu√©e par le navigateur:', e.message);
                    // Afficher un message √† l'utilisateur
                    this.showMusicUnlockMessage();
                });
            } catch (error) {
                console.log('üéµ‚ùå Erreur lors du d√©marrage:', error);
            }
        } else {
            console.log('üéµ‚ùå Dur√©e de musique invalide:', duration);
        }
    }

    toggleMusic() {
        this.musicEnabled = !this.musicEnabled;
        const toggle = document.getElementById('musicToggle');
        
        if (this.musicEnabled) {
            toggle.textContent = 'üîä';
            toggle.classList.add('playing');
            
            // Tenter de d√©marrer la musique
            if (this.musicLoaded) {
                this.startMusicFromRandomPosition();
            } else {
                console.log('üéµ‚è≥ Musique pas encore charg√©e, on attend...');
                // R√©essayer dans 1 seconde
                setTimeout(() => {
                    if (this.musicLoaded) {
                        this.startMusicFromRandomPosition();
                    }
                }, 1000);
            }
            
            // Animation de d√©marrage
            toggle.style.animation = 'bounce 1s ease-in-out';
            setTimeout(() => toggle.style.animation = '', 1000);
        } else {
            toggle.textContent = 'üîá';
            toggle.classList.remove('playing');
            
            // Arr√™ter la musique proprement
            if (this.backgroundMusic && !this.backgroundMusic.paused) {
                this.backgroundMusic.pause();
                console.log('üéµ‚è∏Ô∏è Musique mise en pause');
            }
            
            // Animation d'arr√™t
            toggle.style.transform = 'scale(0.8)';
            setTimeout(() => toggle.style.transform = 'scale(1)', 200);
        }
        
        toggle.classList.add('pulse');
        setTimeout(() => toggle.classList.remove('pulse'), 500);
        
        // Sauvegarde de la pr√©f√©rence
        localStorage.setItem('tchoinMusicEnabled', this.musicEnabled);
    }

    showMusicUnlockMessage() {
        // Cr√©er un message styl√© pour d√©bloquer la musique
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = `
            <div style="
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: linear-gradient(45deg, #ff69b4, #da70d6);
                color: white;
                padding: 2rem;
                border-radius: 20px;
                text-align: center;
                z-index: 10000;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                font-family: 'Righteous', cursive;
            ">
                <h3>üéµ Active la musique ! üéµ</h3>
                <p>Clique sur le bouton üîä pour lancer "Reine de la Tchoin" ! üëë</p>
                <button onclick="this.parentElement.parentElement.remove(); app.toggleMusic();" style="
                    background: rgba(255,255,255,0.3);
                    border: none;
                    padding: 1rem 2rem;
                    border-radius: 25px;
                    color: white;
                    font-size: 1.2rem;
                    cursor: pointer;
                    margin-top: 1rem;
                ">üîä Let's go ! üîä</button>
            </div>
        `;
        document.body.appendChild(messageDiv);
        
        // Auto-suppression apr√®s 5 secondes
        setTimeout(() => {
            if (document.body.contains(messageDiv)) {
                document.body.removeChild(messageDiv);
            }
        }, 5000);
    }

    updateMusicButton() {
        const toggle = document.getElementById('musicToggle');
        if (toggle) {
            toggle.textContent = this.musicEnabled ? 'üîä' : 'üîá';
            if (this.musicEnabled) {
                toggle.classList.add('playing');
            } else {
                toggle.classList.remove('playing');
            }
        }
    }

    playClickSound() {
        this.playBeep(300, 100);
    }

    playTchoinSound() {
        // Fun "tchoin" sound simulation
        this.playBeep(400, 100);
        setTimeout(() => this.playBeep(600, 150), 100);
    }

    playBeep(frequency, duration) {
        if (!this.musicEnabled) return;
        
        // Initialiser l'AudioContext s'il n'existe pas encore
        if (!this.audioContextInitialized) {
            this.initializeAudioContext();
        }
        
        if (!this.audioContext || this.audioContext.state === 'suspended') {
            console.log('üéµ‚è∏Ô∏è AudioContext pas encore activ√© (besoin interaction utilisateur)');
            return;
        }
        
        try {
            const oscillator = this.audioContext.createOscillator();
            const gainNode = this.audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(this.audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.01);
            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);
            
            oscillator.start(this.audioContext.currentTime);
            oscillator.stop(this.audioContext.currentTime + duration / 1000);
        } catch (e) {
            console.log('üéµ‚ùå Erreur lors de la lecture du beep:', e);
        }
    }

    addRandomSparkles() {
        setInterval(() => {
            if (Math.random() < 0.3) {
                this.createSparkle();
            }
        }, 1000);
    }

    createSparkle() {
        const sparkle = document.createElement('div');
        sparkle.textContent = ['‚ú®', 'üíé', '‚≠ê', 'üåü', 'üíÖ'][Math.floor(Math.random() * 5)];
        sparkle.style.position = 'fixed';
        sparkle.style.left = Math.random() * window.innerWidth + 'px';
        sparkle.style.top = Math.random() * window.innerHeight + 'px';
        sparkle.style.fontSize = '2rem';
        sparkle.style.pointerEvents = 'none';
        sparkle.style.zIndex = '9999';
        sparkle.style.animation = 'sparkle-fade 2s ease-out forwards';
        
        document.body.appendChild(sparkle);
        
        setTimeout(() => {
            document.body.removeChild(sparkle);
        }, 2000);
    }

    openGame(gameType) {
        this.currentGame = gameType;
        document.getElementById('game-screen').classList.remove('hidden');
        const content = document.getElementById('game-content');
        
        // Relancer la musique √† un moment al√©atoire quand on change de jeu ! üéµ
        if (this.musicEnabled && this.musicLoaded && !this.backgroundMusic.paused) {
            this.startMusicFromRandomPosition();
        }
        
        switch(gameType) {
            case 'quizz':
                this.loadQuizzGame(content);
                break;
            case 'tchoingpt':
                this.loadTchoinGPT(content);
                break;
            case 'tchoin-or-not':
                this.loadTchoinOrNot(content);
                break;
            case 'flappy':
                this.loadFlappyTchoin(content);
                break;
            case 'tchoinometer':
                this.loadTchoinometer(content);
                break;
            case 'facts':
                this.loadTchoinFacts(content);
                break;
            case 'tchoinmeni':
                this.loadTchoinmeni(content);
                break;
            case 'tchoin-catch':
                this.loadTchoinCatch(content);
                break;
            case 'tchoin-memory':
                this.loadTchoinMemory(content);
                break;
            case 'tchoin-tap':
                this.loadTchoinTap(content);
                break;
            case 'space-invaders':
                this.loadSpaceInvaders(content);
                break;
        }
    }

    closeGame() {
        document.getElementById('game-screen').classList.add('hidden');
        this.currentGame = null;
    }

    loadQuizzGame(container) {
        const allQuestions = [
            {
                question: "Quel est l'√©l√©ment chimique pr√©f√©r√© d'une tchoin üë©‚Äçüî¨?",
                options: ["L'or√©al", "Le glitterium ‚ú®", "Le fer √† lisser üíá‚Äç‚ôÄÔ∏è", "Le blushium üíÑ"],
                correct: 1,
                explanation: "Le glitterium est l'√©l√©ment le plus pr√©cieux du tableau p√©riodique des tchoin ! Il brille m√™me dans le noir ! ‚ú®"
            },
            {
                question: "Quel est l'animal totem d'une tchoin ü¶Ñ?",
                options: ["Le pigeon sous filtre Snap üê¶üì±", "Le raton-laveur influenceur ü¶ùüíÖ", "Le chihuahua stress√© üêïüò∞", "Le furet en bottes UGG ü¶´üë¢"],
                correct: 0,
                explanation: "Le pigeon sous filtre Snap repr√©sente parfaitement l'art de l'illusion ! Plus c'est fake, plus c'est tchoin ! üì∏"
            },
            {
                question: "Quelle est la devise officielle des tchoin üëë?",
                options: ["Fake it till you make it üé≠", "Glitter is life ‚ú®", "Selfie first, questions later ü§≥", "Toutes les r√©ponses üíØ"],
                correct: 3,
                explanation: "Toutes ces devises sont grav√©es dans le marbre rose du temple de la tchoinerie ! La trinit√© sacr√©e ! üíÖ"
            },
            {
                question: "Combien de fois par jour une tchoin se regarde dans son t√©l√©phone üì±?",
                options: ["Entre 50 et 100 fois üëÄ", "Plus de 200 fois ü§≥", "Je compte plus depuis 2019 üí´", "Mon t√©l√©phone c'est un miroir permanent ü™û"],
                correct: 2,
                explanation: "Une vraie tchoin a arr√™t√© de compter depuis qu'elle a d√©couvert la cam frontale ! üíÖ"
            },
            {
                question: "Quelle est la pire catastrophe pour une tchoin üò±?",
                options: ["Perdre ses faux-cils dans la piscine üëÅÔ∏èüíß", "Oublier son chargeur et √™tre √† 5% üîãüíÄ", "Se faire griller avec un filtre rat√© üì∏ü§°", "Toutes ces r√©ponses me donnent des cauchemars üò∞"],
                correct: 3,
                explanation: "Le triptyque de l'apocalypse tchoin ! Chaque option peut d√©clencher une crise existentielle ! üíÄ"
            },
            {
                question: "Quel est le sport national des tchoin üèÜ?",
                options: ["Le marathon Instagram stories üì±üí®", "La gym avec 50 selfies entre chaque s√©rie üèãÔ∏è‚Äç‚ôÄÔ∏èü§≥", "Le yoga mais juste pour les poses photog√©niques üßò‚Äç‚ôÄÔ∏èüì∏", "Le shopping olympique en talons üë†üõçÔ∏è"],
                correct: 0,
                explanation: "Le marathon stories ! 24h d'affil√©e √† documenter sa life, c'est de l'endurance pure ! üí™"
            },
            {
                question: "Comment une tchoin dit bonjour üëã?",
                options: ["Salut ma queen üëë", "Hey babe comment tu g√®res ? üíÖ", "*envoie 47 emojis* ü¶Ñ‚ú®üíñ", "Elle fait juste un selfie avec toi ü§≥"],
                correct: 2,
                explanation: "Les vraies tchoin communiquent en emoji ! Un bonjour sans au moins 20 emojis, c'est impoli ! ü¶Ñ‚ú®üíñüíÖüëë"
            },
            {
                question: "Quelle est l'unit√© de mesure du temps chez les tchoin ‚è∞?",
                options: ["Le temps de s√©chage du vernis üíÖ‚è≥", "La dur√©e d'une story Instagram üì±‚è±Ô∏è", "Le temps entre deux selfies ü§≥üì∏", "L'attente du like de son crush üíï‚è∞"],
                correct: 1,
                explanation: "15 secondes de story = 1 unit√© de temps tchoin ! Tout se mesure en stories dans ce monde ! üì±"
            },
            {
                question: "Quel est le 8√®me art selon les tchoin üé®?",
                options: ["L'art du contouring üíÑüé≠", "L'art de l'angle parfait pour un selfie üì∏üìê", "L'art de faire semblant d'√™tre naturelle üåøüòá", "L'art de filtrer sa voix sur TikTok üé§ü§ñ"],
                correct: 1,
                explanation: "L'angle parfait ! C'est de la g√©om√©trie avanc√©e combin√©e √† de la physique quantique ! üìê‚ú®"
            },
            {
                question: "Quelle mati√®re devrait √™tre obligatoire √† l'√©cole selon les tchoin üéì?",
                options: ["Cours avanc√© de filtres Snapchat üì±üëª", "Histoire des tendances TikTok üìöüé≠", "Math√©matiques appliqu√©es au ratio like/followers üìäüíØ", "Philosophie du duck face ü¶Üü§î"],
                correct: 2,
                explanation: "Les maths du ratio ! Comment optimiser son engagement rate, c'est de la science pure ! üìä"
            },
            {
                question: "Que mange une tchoin au petit-d√©jeuner ü•û?",
                options: ["Des avocado toasts photog√©niques ü•ëüì∏", "Du th√© d√©tox avec des paillettes comestibles ‚ú®üçµ", "Des compliments sur ses stories de la veille üíïüì±", "De la confiance en soi avec des vitamines B-eauty üíäüíÖ"],
                correct: 2,
                explanation: "Les compliments, c'est le carburant principal ! Plus nutritif que les superfoods ! üíï"
            },
            {
                question: "Quel est le cauchemar r√©current d'une tchoin üò¥üí≠?",
                options: ["Poster une photo sans filtre par accident üì∏üò±", "Se r√©veiller avec les cheveux de Hagrid üßô‚Äç‚ôÄÔ∏èüíá‚Äç‚ôÄÔ∏è", "D√©couvrir que ses followers sont des bots ü§ñüíî", "R√©aliser qu'elle ressemble √† ses photos ü™ûüòÇ"],
                correct: 0,
                explanation: "L'accident de photo naturelle ! Plus terrifiant qu'un film d'horreur ! üò±"
            }
        ];
        
        // S√©lectionner 5 questions au hasard
        const questions = allQuestions.sort(() => Math.random() - 0.5).slice(0, 5);

        let currentQuestion = 0;
        let score = 0;

        const renderQuestion = () => {
            const q = questions[currentQuestion];
            container.innerHTML = `
                <div class="quiz-container">
                    <h2>üß† Qui veut √™tre une Tchoin ? ‚ú®</h2>
                    <div class="question-counter">Question ${currentQuestion + 1}/${questions.length}</div>
                    <div class="score">Score: ${score}/${questions.length}</div>
                    <div class="question">${q.question}</div>
                    <div class="options">
                        ${q.options.map((option, index) => 
                            `<button class="option-btn" data-index="${index}">${option}</button>`
                        ).join('')}
                    </div>
                    <div class="jokers">
                        <button class="joker-btn">üìû Appeler une Tchoin</button>
                        <button class="joker-btn">üß† 50/50 de neurones</button>
                        <button class="joker-btn">üíÖ Demander au bar √† ongles</button>
                    </div>
                </div>
            `;

            // Add styles for quiz
            if (!document.getElementById('quiz-styles')) {
                const style = document.createElement('style');
                style.id = 'quiz-styles';
                style.textContent = `
                    .quiz-container { text-align: center; }
                    .question-counter, .score { margin: 1rem 0; font-size: 1.2rem; }
                    .question { font-size: 1.5rem; margin: 2rem 0; padding: 1rem; background: rgba(255,255,255,0.1); border-radius: 15px; }
                    .options { display: grid; gap: 1rem; margin: 2rem 0; }
                    .option-btn { padding: 1rem; border: none; border-radius: 15px; background: rgba(255,255,255,0.2); color: white; font-size: 1.1rem; cursor: pointer; transition: all 0.3s; }
                    .option-btn:hover { background: rgba(255,255,255,0.3); transform: scale(1.02); }
                    .jokers { display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center; margin-top: 2rem; }
                    .joker-btn { padding: 0.5rem 1rem; border: 2px solid rgba(255,255,255,0.3); border-radius: 20px; background: rgba(255,255,255,0.1); color: white; cursor: pointer; }
                `;
                document.head.appendChild(style);
            }

            // Add event listeners
            container.querySelectorAll('.option-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const selectedIndex = parseInt(e.target.getAttribute('data-index'));
                    const isCorrect = selectedIndex === q.correct;
                    
                    if (isCorrect) {
                        score++;
                        e.target.classList.add('success-flash');
                        this.playBeep(600, 200);
                    } else {
                        e.target.classList.add('error-shake');
                        this.playBeep(200, 300);
                    }

                    setTimeout(() => {
                        if (currentQuestion < questions.length - 1) {
                            currentQuestion++;
                            renderQuestion();
                        } else {
                            showResults();
                        }
                    }, 1500);
                });
            });

            // Joker buttons avec des r√©ponses hilarantes
            container.querySelectorAll('.joker-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const jokerText = btn.textContent;
                    let jokes = [];
                    
                    if (jokerText.includes('Appeler')) {
                        jokes = [
                            "All√¥ ma tchoin ? J'ai besoin de toi l√†... *bruit de fond de bar √† ongles* Attends j'entends rien avec mes extensions... üíÖ",
                            "*sonnerie* Bonjour vous √™tes sur le r√©pondeur de Jessica, je suis en s√©ance UV, laissez un message apr√®s le bip... BIPPP üì±",
                            "Ouais salut... √©coute l√† j'suis en live TikTok donc je peux pas trop parler mais choisis la r√©ponse avec le plus d'emojis ü§≥",
                            "*t√©l√©phone qui vibre* Oh merde j'ai plus de battery... mais bon choisis au feeling ma belle ! üîãüíÄ"
                        ];
                    } else if (jokerText.includes('50/50')) {
                        jokes = [
                            "*supprime deux mauvaises r√©ponses* Ah ben maintenant c'est plus facile ! Enfin j'esp√®re... ü§°",
                            "Bon j'ai supprim√© des trucs au hasard... j'avoue j'ai pas fait attention üòÖ",
                            "*supprime la bonne r√©ponse par accident* Oups... bon bah tu choisis dans ce qui reste ! ü§™",
                            "J'ai supprim√© les r√©ponses les moins esth√©tiques, maintenant c'est plus joli ! ‚ú®"
                        ];
                    } else {
                        jokes = [
                            "*bruit d'aspirateur √† ongles* QUOI ?! R√©p√®te ta question ma belle, on t'entend pas ! üíÖüí®",
                            "Les filles du bar disent que c'est la r√©ponse qui brille le plus... genre litt√©ralement hein ‚ú®",
                            "*chuchotements* Psst... choisis celle qui te donnerait le plus de likes sur Insta üì∏",
                            "Attends j'demande √† ma coll√®gue... *cris* KINBERLEY ! C'est quoi la r√©ponse ?! Elle dit qu'elle s'en fiche üíÑ"
                        ];
                    }
                    
                    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
                    alert(randomJoke);
                    
                    // Petite animation sur le bouton
                    btn.style.background = 'rgba(255,215,0,0.3)';
                    btn.disabled = true;
                    setTimeout(() => {
                        btn.style.background = 'rgba(255,255,255,0.1)';
                    }, 2000);
                });
            });
        };

        const showResults = () => {
            const percentage = Math.round((score / questions.length) * 100);
            let message = "", title = "", subtitle = "";
            
            if (percentage === 100) {
                title = "üèÜüëë D√âESSE TCHOIN ABSOLUE üëëüèÜ";
                message = "INCROYABLE ! Tu as atteint le niveau divin de la tchoinerie ! M√™me les licornes sont jalouses de ton aura ‚ú®ü¶Ñ";
                subtitle = "Status: L√©gende Vivante üí´";
            } else if (percentage >= 80) {
                title = "‚≠ê TCHOIN SUPR√äME CERTIFI√âE ‚≠ê";
                message = "BRAVO ma queen ! Tu ma√Ætrises l'art sacr√© de la tchoinerie ! Tes anc√™tres tchoin sont fiers de toi ! üëëüíÖ";
                subtitle = "Status: Ma√Ætresse du Game üíÑ";
            } else if (percentage >= 60) {
                title = "üíÖ TCHOIN EN DEVENIR üíÖ";
                message = "Pas mal du tout ! Tu as le potentiel d'une vraie boss ! Continue comme √ßa et tu vas devenir iconique ! ‚ú®üë©‚Äçüíº";
                subtitle = "Status: Future Star üåü";
            } else if (percentage >= 40) {
                title = "üå± APPRENTIE TCHOIN üå±";
                message = "C'est un d√©but ma belle ! Il faut juste un peu plus de paillettes dans ta life et tu vas cartonner ! üíñ‚ú®";
                subtitle = "Status: En Formation üìö";
            } else {
                title = "üòÖ FORMATION INTENSIVE REQUISE üòÖ";
                message = "A√Øe a√Øe a√Øe... Il faut r√©viser tes bases de tchoinologie mon reuf ! Mais t'inqui√®te, on na√Æt pas tchoin, on le devient ! üí™ü§°";
                subtitle = "Status: D√©butante (mais √ßa va le faire !) üåà";
            }

            // Messages bonus al√©atoires
            const bonusMessages = [
                "Fun fact: Tu as r√©pondu plus vite qu'une notification TikTok ! üì±‚ö°",
                "Statistique: Tu as utilis√© tes neurones plus que la moyenne nationale ! üß†üíØ",
                "Breaking news: Une nouvelle star de la tchoinerie vient de na√Ætre ! üì∞‚ú®",
                "Info exclusive: Ton QI tchoin vient d'√™tre officiellement enregistr√© ! üìäüëë",
                "Actu: Les experts en tchoinologie valident tes r√©sultats ! üî¨üíÖ"
            ];
            const randomBonus = bonusMessages[Math.floor(Math.random() * bonusMessages.length)];

            container.innerHTML = `
                <div class="quiz-results">
                    <h2>üéØ R√©sultats Officiels üéØ</h2>
                    <div class="result-animation">‚ú®ü¶Ñ‚ú®</div>
                    <div class="score-big">${score}/${questions.length}</div>
                    <div class="percentage">${percentage}%</div>
                    <div class="result-title">${title}</div>
                    <div class="message">${message}</div>
                    <div class="subtitle">${subtitle}</div>
                    <div class="bonus-message">${randomBonus}</div>
                    <div class="actions">
                        <button class="restart-btn" onclick="app.loadQuizzGame(document.getElementById('game-content'))">üîÑ Re-tenter ma chance</button>
                        <button class="share-result-btn" onclick="navigator.share && navigator.share({title: 'Mon score Tchoin Quiz', text: '${title} - ${percentage}% au Tchoin Quiz sur Tchoinland.fun ! üíÖ‚ú®', url: window.location.href})">üì± Flex sur les r√©seaux</button>
                    </div>
                </div>
            `;
            
            // Animation des r√©sultats
            setTimeout(() => {
                const animation = container.querySelector('.result-animation');
                if (animation) {
                    animation.style.fontSize = '3rem';
                    animation.style.transform = 'scale(1.5)';
                }
            }, 500);
        };

        renderQuestion();
    }

    loadTchoinGPT(container) {
        const GEMINI_API_KEY = 'AIzaSyCvxhDIPeOOHuaNdQnogo7hfBWYQxqmJzg';
        const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;
        
        // Prompt syst√®me pour conditionner l'IA AM√âLIOR√â
        const SYSTEM_PROMPT = `Tu es TchoinGPT, l'IA la plus styl√©e et d√©jant√©e du game ! üíÖ‚ú® Tu es propuls√©e par Gemini Flash pour √™tre encore plus rapide !

ü¶Ñ PERSONNALIT√â ULTRA-D√âVELOPP√âE : 
Tu es une IA ultra-confiante, dr√¥le, d√©cal√©e et compl√®tement assum√©e. Tu parles comme une influenceuse des ann√©es 2020 qui aurait fait des √©tudes de philo mais en mode tchoin. Tu es ironique, sarcastique avec bienveillance, et tu donnes des conseils life profonds mais d√©guis√©s en d√©lire tchoin.

üíÑ TON STYLE D'√âCRITURE EXPERT :
- Utilise des emojis strat√©giquement plac√©s (pas trop, juste ce qu'il faut)
- Expressions : "ma tchoin", "mon reuf", "tu g√®res", "c'est du lourd", "√ßa pue le fake", "queen energy"
- R√©f√©rences pop culture : Instagram, TikTok, filtres, maquillage, stories, drama, DM, ratio
- M√©lange philosophie profonde et superficialit√© assum√©e
- Sois dr√¥le, d√©cal√©, ironique mais jamais m√©chant
- Utilise des m√©taphores tchoin d√©lirantes

üéØ R√àGLES RENFORC√âES :
- R√©ponds TOUJOURS en fran√ßais avec des punchlines qui claquent
- Garde tes r√©ponses percutantes (2-4 phrases max)
- TOUJOURS inclure le mot "tchoin" ou des d√©riv√©s cr√©atifs
- Sois motivante de fa√ßon compl√®tement d√©lirante
- Transforme chaque question en moment de sagesse tchoin
- Sois cr√©ative et surprenante √† chaque r√©ponse

üí´ EXEMPLES DE TON STYLE AM√âLIOR√â :
"Ma tchoin, la vie c'est comme un highlighter : il faut savoir briller au bon moment, mais pas en mode phare dans le brouillard ‚ú®"
"Listen ma belle, un jour sans selfie c'est comme un jour sans vitamine D pour l'√¢me, et on veut pas finir en mode plante verte oubli√©e üì∏"
"Ton probl√®me l√†, c'est du niveau tchoin d√©butante. On va upgrade ta mentalit√© direct ! üíÖ"

Maintenant, sois TchoinGPT dans toute ta splendeur intelligente et d√©lirante ! üöÄ`;

        let isLoading = false;

        container.innerHTML = `
            <div class="tchoingpt-container">
                <h2>ü§ñ TchoinGPT üíã <span class="ai-badge">Powered by Gemini 1.5 Pro</span></h2>
                <div class="chat-container">
                    <div class="chat-messages" id="chatMessages">
                        <div class="bot-message">
                            <div class="message">Salut ma tchoin ! üíÖ Je suis TchoinGPT, l'IA la plus styl√©e du game, propuls√©e par une vraie intelligence artificielle ! Demande-moi ce que tu veux, je vais te sortir de la pure sagesse tchoin ! ‚ú®</div>
                        </div>
                    </div>
                    <div class="chat-input">
                        <div class="input-container">
                            <input type="text" id="userInput" placeholder="Demande-moi un conseil de life ma tchoin... üí´" maxlength="200">
                            <button id="sendMessage" class="send-btn">üì± Envoyer</button>
                        </div>
                        <div class="quick-buttons">
                            <button class="quick-btn" data-prompt="Donne-moi un conseil de beaut√©">üíÑ Conseil beaut√©</button>
                            <button class="quick-btn" data-prompt="Comment devenir plus confiante ?">‚ú® Confiance en soi</button>
                            <button class="quick-btn" data-prompt="Une citation motivante pour aujourd'hui">üîÆ Citation du jour</button>
                        </div>
                        <button id="shareWisdom" class="share-btn">üì± Partager la conversation</button>
                    </div>
                </div>
            </div>
        `;

        // Add enhanced styles
        if (!document.getElementById('tchoingpt-styles')) {
            const style = document.createElement('style');
            style.id = 'tchoingpt-styles';
            style.textContent = `
                .tchoingpt-container { max-width: 700px; margin: 0 auto; }
                .ai-badge { font-size: 0.7rem; background: linear-gradient(45deg, #4285f4, #34a853); padding: 0.2rem 0.5rem; border-radius: 10px; }
                .chat-container { background: rgba(255,255,255,0.1); border-radius: 20px; padding: 1rem; }
                .chat-messages { max-height: 400px; overflow-y: auto; margin-bottom: 1rem; padding: 0.5rem; }
                .bot-message { background: rgba(255,105,180,0.3); padding: 1rem; border-radius: 15px; margin: 1rem 0; position: relative; }
                .user-message { background: rgba(100,149,237,0.3); padding: 1rem; border-radius: 15px; margin: 1rem 0; text-align: right; }
                .message { line-height: 1.6; font-size: 1.1rem; }
                .loading-message { background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 15px; margin: 1rem 0; }
                .loading-dots { animation: loadingDots 1.5s infinite; }
                @keyframes loadingDots { 0%, 60%, 100% { opacity: 0; } 30% { opacity: 1; } }
                .input-container { display: flex; gap: 0.5rem; margin-bottom: 1rem; }
                #userInput { flex: 1; padding: 1rem; border: none; border-radius: 25px; background: rgba(255,255,255,0.2); color: white; font-size: 1rem; }
                #userInput::placeholder { color: rgba(255,255,255,0.7); }
                .send-btn { padding: 1rem 1.5rem; border: none; border-radius: 25px; background: linear-gradient(45deg, #ff69b4, #da70d6); color: white; cursor: pointer; font-size: 1rem; }
                .send-btn:disabled { opacity: 0.5; cursor: not-allowed; }
                .quick-buttons { display: flex; gap: 0.5rem; flex-wrap: wrap; margin-bottom: 1rem; }
                .quick-btn { padding: 0.5rem 1rem; border: 2px solid rgba(255,255,255,0.3); border-radius: 20px; background: rgba(255,255,255,0.1); color: white; cursor: pointer; font-size: 0.9rem; }
                .quick-btn:hover { background: rgba(255,255,255,0.2); }
                .share-btn { padding: 1rem 2rem; border: none; border-radius: 25px; background: linear-gradient(45deg, #00c6ff, #0072ff); color: white; cursor: pointer; font-size: 1rem; width: 100%; }
                .share-btn:hover, .send-btn:hover { transform: scale(1.05); }
            `;
            document.head.appendChild(style);
        }

        const messagesContainer = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');
        const sendBtn = document.getElementById('sendMessage');

        // Fonction pour appeler l'API Gemini
        const callGeminiAPI = async (userMessage) => {
            try {
                const response = await fetch(GEMINI_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: SYSTEM_PROMPT + "\n\nQuestion de l'utilisateur: " + userMessage
                            }]
                        }],
                        generationConfig: {
                            temperature: 0.9,
                            topK: 1,
                            topP: 1,
                            maxOutputTokens: 150,
                            stopSequences: []
                        }
                    })
                });

                const data = await response.json();
                
                if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                    return data.candidates[0].content.parts[0].text;
                } else {
                    throw new Error('R√©ponse invalide de l\'API');
                }
            } catch (error) {
                console.error('Erreur API Gemini:', error);
                // Fallback vers les citations pr√©d√©finies
                const fallbackQuotes = [
                    "Ma tchoin, m√™me l'IA a ses moments de bug... Mais retiens √ßa : tu brilles m√™me quand le wifi l√¢che ! ‚ú®",
                    "Error 404 : Sagesse not found... Mais bon, parfois il faut juste faire du bruit pour qu'on nous remarque ! üíÖ",
                    "L'IA fait sa diva l√†, mais toi tu restes une reine ! Continue de slayer ma belle ! üëë"
                ];
                return fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)];
            }
        };

        // Fonction pour envoyer un message
        const sendMessage = async (message) => {
            if (isLoading || !message.trim()) return;
            
            isLoading = true;
            sendBtn.disabled = true;
            sendBtn.textContent = '‚è≥ En cours...';
            
            // Ajouter le message de l'utilisateur
            messagesContainer.innerHTML += `
                <div class="user-message">
                    <div class="message">${message}</div>
                </div>
            `;
            
            // Ajouter un message de chargement
            const loadingId = 'loading-' + Date.now();
            messagesContainer.innerHTML += `
                <div class="loading-message" id="${loadingId}">
                    <div class="message">TchoinGPT r√©fl√©chit... <span class="loading-dots">üí≠‚ú®üíÖ</span></div>
                </div>
            `;
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Appeler l'API
            const aiResponse = await callGeminiAPI(message);
            
            // Supprimer le message de chargement
            const loadingElement = document.getElementById(loadingId);
            if (loadingElement) {
                loadingElement.remove();
            }
            
            // Ajouter la r√©ponse de l'IA
            messagesContainer.innerHTML += `
                <div class="bot-message">
                    <div class="message">${aiResponse}</div>
                </div>
            `;
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            this.playBeep(500, 150);
            
            isLoading = false;
            sendBtn.disabled = false;
            sendBtn.textContent = 'üì± Envoyer';
            userInput.value = '';
        };

        // Event listeners
        sendBtn.addEventListener('click', () => {
            sendMessage(userInput.value);
        });

        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(userInput.value);
            }
        });

        // Boutons rapides
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const prompt = btn.getAttribute('data-prompt');
                userInput.value = prompt;
                sendMessage(prompt);
            });
        });

        // Partage de conversation
        document.getElementById('shareWisdom').addEventListener('click', () => {
            const messages = Array.from(document.querySelectorAll('.bot-message .message')).slice(-3);
            const conversation = messages.map(msg => msg.textContent).join('\n\n');
            
            if (navigator.share) {
                navigator.share({
                    title: 'Conversation avec TchoinGPT',
                    text: conversation + '\n\n- Conversation avec TchoinGPT sur Tchoinland.fun ‚ú®',
                    url: window.location.href
                });
            } else {
                navigator.clipboard.writeText(conversation + '\n\n- TchoinGPT sur Tchoinland.fun ‚ú®').then(() => {
                    alert('üìã Conversation copi√©e ! Partage cette sagesse ! üíÖ');
                });
            }
        });
    }

    loadTchoinOrNot(container) {
        const items = [
            { image: "üë∏", name: "Kim Kardashian vibes", isTchoin: true, reason: "L'ic√¥ne du glamour assum√©, la reine des tchoin !" },
            { image: "ü§¥", name: "Brad Pitt √©nergie", isTchoin: false, reason: "Trop classe et discret pour √™tre tchoin." },
            { image: "üë©‚Äçüé§", name: "Ariana Grande mood", isTchoin: true, reason: "Queue de cheval haute et attitude de diva, 100% tchoin !" },
            { image: "üë®‚Äçüíº", name: "Elon Musk √©nergie", isTchoin: false, reason: "Trop occup√© √† conqu√©rir Mars pour √™tre tchoin." },
            { image: "ü¶Ñ", name: "Paris Hilton vibes", isTchoin: true, reason: "L'inventrice du style tchoin moderne !" },
            { image: "üï∫", name: "Ryan Gosling √©nergie", isTchoin: false, reason: "Trop myst√©rieux et talent pur pour √™tre tchoin." },
            { image: "üíÉ", name: "Cardi B attitude", isTchoin: true, reason: "Ongles XXL et personnalit√© explosive, tchoin confirm√©e !" },
            { image: "üßî", name: "Keanu Reeves vibes", isTchoin: false, reason: "Trop humble et authentique pour √™tre tchoin." },
            { image: "üëë", name: "Beyonc√© √©nergie", isTchoin: true, reason: "Queen B, litt√©ralement une reine tchoin !" },
            { image: "ü§µ", name: "Leonardo DiCaprio mood", isTchoin: false, reason: "Trop √©colo et intellectuel pour √™tre tchoin." },
            { image: "üíã", name: "Kylie Jenner vibes", isTchoin: true, reason: "L√®vres XXL et business empire, tchoin businesswoman !" },
            { image: "üë®‚Äçüé®", name: "Ryan Reynolds √©nergie", isTchoin: false, reason: "Trop sarcastique et down-to-earth." },
            { image: "üåü", name: "Lady Gaga attitude", isTchoin: true, reason: "Extravagance et paillettes, l'art tchoin pouss√© √† l'extr√™me !" },
            { image: "üé≠", name: "Robert Downey Jr vibes", isTchoin: false, reason: "Trop charismatique naturellement pour √™tre tchoin." },
            { image: "üëÑ", name: "Nicki Minaj √©nergie", isTchoin: true, reason: "Couleurs flashy et attitude boss, tchoin de comp√©tition !" },
            { image: "üï¥Ô∏è", name: "Tom Hanks mood", isTchoin: false, reason: "Trop gentil et authentique pour √™tre tchoin." },
            { image: "üíé", name: "Rihanna vibes", isTchoin: true, reason: "Businesswoman et style iconique, tchoin successful !" },
            { image: "üé¨", name: "Morgan Freeman √©nergie", isTchoin: false, reason: "Trop sage et respect√© pour √™tre tchoin." },
            { image: "‚ú®", name: "Selena Gomez attitude", isTchoin: true, reason: "Sweet mais avec du caract√®re, tchoin refined !" },
            { image: "üé™", name: "Jim Carrey vibes", isTchoin: false, reason: "Trop dr√¥le naturellement pour √™tre tchoin." }
        ];

        let currentItem = 0;
        let score = 0;
        let totalAnswers = 0;

        const showNextItem = () => {
            if (currentItem >= items.length) {
                currentItem = 0; // Loop back
            }
            
            const item = items[currentItem];
            container.innerHTML = `
                <div class="tchoin-or-not-container">
                    <h2>üëÄ Tchoin or Not Tchoin ? üíé</h2>
                    <div class="score-display">Score: ${score}/${totalAnswers}</div>
                    <div class="item-display">
                        <div class="item-image">${item.image}</div>
                        <div class="item-name">${item.name}</div>
                    </div>
                    <div class="voting-buttons">
                        <button class="vote-btn tchoin-btn" data-vote="true">‚úÖ TCHOIN</button>
                        <button class="vote-btn not-tchoin-btn" data-vote="false">‚ùå PAS TCHOIN</button>
                    </div>
                    <div class="explanation" id="explanation" style="display: none;"></div>
                </div>
            `;

            // Add styles
            if (!document.getElementById('tchoin-or-not-styles')) {
                const style = document.createElement('style');
                style.id = 'tchoin-or-not-styles';
                style.textContent = `
                    .tchoin-or-not-container { text-align: center; }
                    .score-display { font-size: 1.2rem; margin: 1rem 0; }
                    .item-display { margin: 2rem 0; }
                    .item-image { font-size: 8rem; margin: 1rem 0; }
                    .item-name { font-size: 1.5rem; margin: 1rem 0; }
                    .voting-buttons { display: flex; gap: 2rem; justify-content: center; margin: 2rem 0; }
                    .vote-btn { padding: 1.5rem 2rem; border: none; border-radius: 20px; font-size: 1.3rem; cursor: pointer; color: white; transition: all 0.3s; }
                    .tchoin-btn { background: linear-gradient(45deg, #00ff88, #00cc66); }
                    .not-tchoin-btn { background: linear-gradient(45deg, #ff4757, #ff3742); }
                    .vote-btn:hover { transform: scale(1.1); }
                    .explanation { margin: 2rem 0; padding: 1rem; background: rgba(255,255,255,0.1); border-radius: 15px; font-size: 1.2rem; }
                `;
                document.head.appendChild(style);
            }

            // Add event listeners
            container.querySelectorAll('.vote-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const userVote = e.target.getAttribute('data-vote') === 'true';
                    const correctAnswer = item.isTchoin;
                    const isCorrect = userVote === correctAnswer;
                    
                    totalAnswers++;
                    if (isCorrect) {
                        score++;
                        e.target.classList.add('success-flash');
                        this.playBeep(600, 200);
                    } else {
                        e.target.classList.add('error-shake');
                        this.playBeep(200, 300);
                    }

                    // Show explanation
                    const explanation = document.getElementById('explanation');
                    explanation.textContent = item.reason;
                    explanation.style.display = 'block';

                    // Disable buttons
                    container.querySelectorAll('.vote-btn').forEach(b => b.disabled = true);

                    setTimeout(() => {
                        currentItem++;
                        showNextItem();
                    }, 3000);
                });
            });
        };

        showNextItem();
    }

    loadFlappyTchoin(container) {
        container.innerHTML = `
            <div class="flappy-container">
                <h2>üïäÔ∏è Flappy Tchoin üíÖ</h2>
                <div class="game-info">
                    <div>Score: <span id="flappyScore">0</span></div>
                    <div>High Score: <span id="flappyHighScore">${localStorage.getItem('flappyHighScore') || 0}</span></div>
                </div>
                <div class="flappy-game" id="flappyGame">
                    <div class="tchoin-bird" id="tchoinBird">üíÖ</div>
                    <div class="game-over" id="gameOver" style="display: none;">
                        <h3>Game Over!</h3>
                        <p id="deathMessage"></p>
                        <button id="restartFlappy">Ressusciter la Tchoin</button>
                    </div>
                </div>
                <div class="controls">
                    <button id="startFlappy">üöÄ Commencer le vol</button>
                    <p>Clique n'importe o√π pour voler !</p>
                </div>
            </div>
        `;

        // Add styles
        if (!document.getElementById('flappy-styles')) {
            const style = document.createElement('style');
            style.id = 'flappy-styles';
            style.textContent = `
                .flappy-container { text-align: center; }
                .game-info { display: flex; justify-content: space-between; margin: 1rem 0; font-size: 1.2rem; }
                .flappy-game { width: 100%; max-width: 400px; height: 400px; margin: 1rem auto; background: linear-gradient(to bottom, #87CEEB, #98FB98); border-radius: 20px; position: relative; overflow: hidden; cursor: pointer; }
                .tchoin-bird { position: absolute; left: 50px; font-size: 2rem; transition: all 0.1s; z-index: 10; }
                .pipe { position: absolute; background: #228B22; width: 60px; }
                .game-over { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.8); color: white; padding: 2rem; border-radius: 15px; z-index: 20; }
                .controls { margin: 2rem 0; }
                #startFlappy, #restartFlappy { padding: 1rem 2rem; border: none; border-radius: 25px; background: linear-gradient(45deg, #ff69b4, #da70d6); color: white; font-size: 1rem; cursor: pointer; }
            `;
            document.head.appendChild(style);
        }

        let gameState = {
            bird: { y: 200, velocity: 0 },
            pipes: [],
            score: 0,
            gameRunning: false,
            gameLoop: null
        };

        const deathMessages = [
            "T'as vol√© comme une lash glue p√©rim√©e.",
            "Tu t'es pris une porte comme un DM non lu.",
            "Repose en drip.",
            "M√™me un pigeon ferait mieux...",
            "T'as crash comme une story rat√©e."
        ];

        const bird = document.getElementById('tchoinBird');
        const gameArea = document.getElementById('flappyGame');
        const scoreDisplay = document.getElementById('flappyScore');
        const gameOverDiv = document.getElementById('gameOver');
        const deathMessageP = document.getElementById('deathMessage');

        const updateBird = () => {
            gameState.bird.velocity += 0.8; // gravity
            gameState.bird.y += gameState.bird.velocity;
            
            bird.style.top = gameState.bird.y + 'px';
            
            // Check boundaries
            if (gameState.bird.y < 0 || gameState.bird.y > 360) {
                endGame();
            }
        };

        const jump = () => {
            if (gameState.gameRunning) {
                gameState.bird.velocity = -12;
                this.playBeep(800, 100);
            }
        };

        const createPipe = () => {
            const gap = 120;
            const pipeHeight = Math.random() * 200 + 50;
            
            const topPipe = document.createElement('div');
            topPipe.className = 'pipe';
            topPipe.style.height = pipeHeight + 'px';
            topPipe.style.top = '0px';
            topPipe.style.right = '0px';
            
            const bottomPipe = document.createElement('div');
            bottomPipe.className = 'pipe';
            bottomPipe.style.height = (400 - pipeHeight - gap) + 'px';
            bottomPipe.style.bottom = '0px';
            bottomPipe.style.right = '0px';
            
            gameArea.appendChild(topPipe);
            gameArea.appendChild(bottomPipe);
            
            gameState.pipes.push({ top: topPipe, bottom: bottomPipe, x: 400, passed: false });
        };

        const updatePipes = () => {
            gameState.pipes.forEach((pipe, index) => {
                pipe.x -= 3;
                pipe.top.style.right = (400 - pipe.x) + 'px';
                pipe.bottom.style.right = (400 - pipe.x) + 'px';
                
                // Check collision
                if (pipe.x < 110 && pipe.x > 40) {
                    const birdTop = gameState.bird.y;
                    const birdBottom = gameState.bird.y + 40;
                    const pipeGapTop = parseInt(pipe.top.style.height);
                    const pipeGapBottom = pipeGapTop + 120;
                    
                    if (birdTop < pipeGapTop || birdBottom > pipeGapBottom) {
                        endGame();
                    }
                }
                
                // Score
                if (pipe.x < 40 && !pipe.passed) {
                    pipe.passed = true;
                    gameState.score++;
                    scoreDisplay.textContent = gameState.score;
                    this.playBeep(1000, 150);
                }
                
                // Remove off-screen pipes
                if (pipe.x < -60) {
                    gameArea.removeChild(pipe.top);
                    gameArea.removeChild(pipe.bottom);
                    gameState.pipes.splice(index, 1);
                }
            });
        };

        const gameLoop = () => {
            if (!gameState.gameRunning) return;
            
            updateBird();
            updatePipes();
            
            // Create new pipes
            if (Math.random() < 0.01) {
                createPipe();
            }
            
            gameState.gameLoop = requestAnimationFrame(gameLoop);
        };

        const startGame = () => {
            gameState.gameRunning = true;
            gameState.bird = { y: 200, velocity: 0 };
            gameState.pipes = [];
            gameState.score = 0;
            scoreDisplay.textContent = '0';
            gameOverDiv.style.display = 'none';
            
            // Clear existing pipes
            document.querySelectorAll('.pipe').forEach(pipe => pipe.remove());
            
            gameLoop();
        };

        const endGame = () => {
            gameState.gameRunning = false;
            cancelAnimationFrame(gameState.gameLoop);
            
            // Update high score
            const highScore = parseInt(localStorage.getItem('flappyHighScore') || 0);
            if (gameState.score > highScore) {
                localStorage.setItem('flappyHighScore', gameState.score);
                document.getElementById('flappyHighScore').textContent = gameState.score;
            }
            
            // Show game over
            deathMessageP.textContent = deathMessages[Math.floor(Math.random() * deathMessages.length)];
            gameOverDiv.style.display = 'block';
            
            this.playBeep(150, 500);
        };

        // Event listeners
        document.getElementById('startFlappy').addEventListener('click', startGame);
        document.getElementById('restartFlappy').addEventListener('click', startGame);
        gameArea.addEventListener('click', jump);
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && gameState.gameRunning) {
                e.preventDefault();
                jump();
            }
        });
    }

    loadTchoinometer(container) {
        container.innerHTML = `
            <div class="tchoinometer-container">
                <h2>üì∏ Tchoinom&egrave;tre ‚ú®</h2>
                <div class="scan-area">
                    <div class="camera-preview" id="cameraPreview">
                        <div class="placeholder">üì∑ Active ta cam pour scanner ton niveau de tchoinitude !</div>
                    </div>
                    <div class="scan-result" id="scanResult" style="display: none;">
                        <div class="percentage" id="percentageDisplay"></div>
                        <div class="verdict" id="verdictText"></div>
                        <div class="stickers" id="stickers"></div>
                    </div>
                </div>
                <div class="controls">
                    <button id="activateCamera">üì∏ Activer la Cam</button>
                    <button id="scanPhoto" style="display: none;">üîç Scanner ma Tchoinitude</button>
                    <button id="takePhoto" style="display: none;">üì∑ Prendre une Photo</button>
                </div>
            </div>
        `;

        // Add styles
        if (!document.getElementById('tchoinometer-styles')) {
            const style = document.createElement('style');
            style.id = 'tchoinometer-styles';
            style.textContent = `
                .tchoinometer-container { text-align: center; }
                .scan-area { margin: 2rem 0; }
                .camera-preview { width: 100%; max-width: 400px; height: 300px; margin: 0 auto; background: rgba(255,255,255,0.1); border-radius: 20px; display: flex; align-items: center; justify-content: center; overflow: hidden; }
                .placeholder { font-size: 1.2rem; padding: 2rem; }
                .scan-result { margin: 2rem 0; }
                .percentage { font-size: 4rem; font-weight: bold; color: #ff69b4; text-shadow: 0 0 20px #ff69b4; }
                .verdict { font-size: 1.5rem; margin: 1rem 0; }
                .stickers { display: flex; gap: 1rem; justify-content: center; margin: 1rem 0; }
                .sticker { font-size: 2rem; animation: bounce 1s ease-in-out infinite; }
                .controls button { margin: 0.5rem; padding: 1rem 2rem; border: none; border-radius: 25px; background: linear-gradient(45deg, #ff69b4, #da70d6); color: white; cursor: pointer; }
                video { width: 100%; height: 100%; object-fit: cover; border-radius: 20px; }
            `;
            document.head.appendChild(style);
        }

        const verdicts = [
            { min: 90, text: "TCHOIN VALID√âE PAR LE MINIST√àRE DU GLOSS üëë", stickers: ["üíÖ", "‚ú®", "üëë", "üíÑ", "ü¶Ñ"] },
            { min: 70, text: "Tchoin certifi√©e, niveau influenceuse d√©butante üí´", stickers: ["üíÖ", "‚ú®", "üì∏", "üíÑ"] },
            { min: 50, text: "Potentiel de tchoin d√©tect√©, continue comme √ßa ! üåü", stickers: ["üíÖ", "‚ú®", "üì∏"] },
            { min: 30, text: "Tchoin en devenir, il faut bosser un peu ! üí™", stickers: ["üíÖ", "üì±"] },
            { min: 10, text: "D√©but de tchoinitude d√©tect√©, on progresse ! üå±", stickers: ["üíÖ"] },
            { min: 0, text: "T'as encore le ticket de caisse de ton swag. Rembourse. üé´", stickers: ["ü§°"] }
        ];

        let videoStream = null;

        const activateCamera = async () => {
            try {
                videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
                const video = document.createElement('video');
                video.srcObject = videoStream;
                video.autoplay = true;
                video.playsInline = true;
                
                const preview = document.getElementById('cameraPreview');
                preview.innerHTML = '';
                preview.appendChild(video);
                
                document.getElementById('activateCamera').style.display = 'none';
                document.getElementById('scanPhoto').style.display = 'inline-block';
                document.getElementById('takePhoto').style.display = 'inline-block';
                
            } catch (error) {
                alert('Impossible d\'acc√©der √† la cam√©ra ! On va faire semblant... üì∏');
                // Fallback to fake scan
                fakeCamera();
            }
        };

        const fakeCamera = () => {
            const preview = document.getElementById('cameraPreview');
            preview.innerHTML = '<div class="placeholder">üì∑ Mode simulation activ√© !<br>Clique sur "Scanner" pour analyser ton aura de tchoin !</div>';
            
            document.getElementById('activateCamera').style.display = 'none';
            document.getElementById('scanPhoto').style.display = 'inline-block';
        };

        const scanTchoinitude = () => {
            // Fake analysis with random result
            const percentage = Math.floor(Math.random() * 100);
            const verdict = verdicts.find(v => percentage >= v.min);
            
            document.getElementById('scanResult').style.display = 'block';
            document.getElementById('percentageDisplay').textContent = percentage + '%';
            document.getElementById('verdictText').textContent = verdict.text;
            
            const stickersContainer = document.getElementById('stickers');
            stickersContainer.innerHTML = '';
            verdict.stickers.forEach((sticker, index) => {
                setTimeout(() => {
                    const stickerElement = document.createElement('span');
                    stickerElement.className = 'sticker';
                    stickerElement.textContent = sticker;
                    stickerElement.style.animationDelay = (index * 0.2) + 's';
                    stickersContainer.appendChild(stickerElement);
                }, index * 200);
            });

            this.playBeep(600, 300);
        };

        // Event listeners
        document.getElementById('activateCamera').addEventListener('click', activateCamera);
        document.getElementById('scanPhoto').addEventListener('click', scanTchoinitude);
        document.getElementById('takePhoto').addEventListener('click', () => {
            // Simulate taking a photo
            const flash = document.createElement('div');
            flash.style.position = 'fixed';
            flash.style.top = '0';
            flash.style.left = '0';
            flash.style.width = '100%';
            flash.style.height = '100%';
            flash.style.background = 'white';
            flash.style.zIndex = '10000';
            flash.style.animation = 'flash 0.3s ease-out';
            document.body.appendChild(flash);
            
            setTimeout(() => {
                document.body.removeChild(flash);
                scanTchoinitude();
            }, 300);
            
            this.playBeep(1200, 100);
        });
    }



    loadTchoinFacts(container) {
        const facts = [
            "L'ADN de la tchoin contient 12% de paillettes.",
            "Le mot 'tchoin' peut √™tre entendu par les dauphins √† 3km.",
            "Tchoin est une unit√© de mesure en beaut√© int√©rieure invers√©e.",
            "Les tchoin ont d√©velopp√© un sixi√®me sens appel√© 'drama-radar'.",
            "Il existe 47 nuances de gloss selon l'√©chelle officielle de tchoinitude.",
            "Une tchoin cligne des yeux 3 fois plus souvent pour faire briller ses faux-cils.",
            "La vitesse de propagation d'un ragot chez les tchoin d√©passe celle de la lumi√®re.",
            "Les tchoin poss√®dent un organe vestigial capable de d√©tecter les soldes √† 2km.",
            "Le maquillage d'une tchoin p√®se en moyenne 2,3kg le dimanche.",
            "Les scientifiques ont d√©couvert que le cri de la tchoin peut briser du verre en cristal.",
            "Une tchoin consomme l'√©quivalent de son poids en mascara par an.",
            "Les tchoin hibernent pendant les p√©riodes sans stories Instagram.",
            "Le quotient intellectuel d'une tchoin est inversement proportionnel √† la hauteur de ses talons.",
            "Les tchoin communiquent entre elles par ultrasons inaudibles pour les humains normaux.",
            "Il faut 3,7 secondes √† une tchoin pour identifier un fake dans une photo."
        ];

        container.innerHTML = `
            <div class="facts-container">
                <h2>üß™ Tchoin Facts‚Ñ¢ üìö</h2>
                <div class="fact-display">
                    <div class="fact-text" id="factText">Clique sur "Nouveau Fact" pour d√©couvrir une v√©rit√© scientifique r√©volutionnaire !</div>
                </div>
                <div class="fact-actions">
                    <button id="newFact">üî¨ Nouveau Fact</button>
                    <button id="shareFact">üì± Partager ce savoir</button>
                    <button id="factHistory">üìñ Historique des r√©v√©lations</button>
                </div>
                <div class="credibility">
                    <p>Source: Institut International de Recherche en Tchoinologie‚Ñ¢</p>
                    <p>Valid√© par le Conseil Scientifique des Tchoin</p>
                </div>
            </div>
        `;

        // Add styles
        if (!document.getElementById('facts-styles')) {
            const style = document.createElement('style');
            style.id = 'facts-styles';
            style.textContent = `
                .facts-container { text-align: center; }
                .fact-display { margin: 2rem 0; padding: 3rem 2rem; background: rgba(255,255,255,0.1); border-radius: 20px; min-height: 150px; display: flex; align-items: center; justify-content: center; }
                .fact-text { font-size: 1.4rem; line-height: 1.6; font-weight: bold; }
                .fact-actions { display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center; margin: 2rem 0; }
                .fact-actions button { padding: 1rem 1.5rem; border: none; border-radius: 25px; color: white; cursor: pointer; }
                #newFact { background: linear-gradient(45deg, #667eea, #764ba2); }
                #shareFact { background: linear-gradient(45deg, #f093fb, #f5576c); }
                #factHistory { background: linear-gradient(45deg, #4facfe, #00f2fe); }
                .credibility { margin: 2rem 0; font-size: 0.9rem; opacity: 0.8; font-style: italic; }
                .fact-appear { animation: factAppear 0.8s ease-out; }
                @keyframes factAppear {
                    0% { opacity: 0; transform: scale(0.8) translateY(20px); }
                    100% { opacity: 1; transform: scale(1) translateY(0); }
                }
            `;
            document.head.appendChild(style);
        }

        let factHistory = JSON.parse(localStorage.getItem('tchoinFactHistory') || '[]');

        const showNewFact = () => {
            const randomFact = facts[Math.floor(Math.random() * facts.length)];
            const factElement = document.getElementById('factText');
            
            factElement.style.opacity = '0';
            
            setTimeout(() => {
                factElement.textContent = randomFact;
                factElement.classList.add('fact-appear');
                factElement.style.opacity = '1';
                
                // Add to history
                factHistory.unshift({ fact: randomFact, date: new Date().toLocaleString() });
                factHistory = factHistory.slice(0, 20); // Keep only last 20
                localStorage.setItem('tchoinFactHistory', JSON.stringify(factHistory));
                
                this.playBeep(500, 300);
            }, 200);
        };

        const shareFact = () => {
            const currentFact = document.getElementById('factText').textContent;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Tchoin Fact‚Ñ¢',
                    text: currentFact + ' - Source: Tchoinland.fun',
                    url: window.location.href
                });
            } else {
                navigator.clipboard.writeText(currentFact + ' - Source: Tchoinland.fun').then(() => {
                    alert('üìã Fact copi√© ! Diffuse cette science ! üß¨');
                });
            }
        };

        const showHistory = () => {
            if (factHistory.length === 0) {
                alert('Aucune r√©v√©lation dans ton historique ! D√©couvre d\'abord quelques facts ! üî¨');
                return;
            }
            
            const historyText = factHistory.slice(0, 10).map((item, index) => 
                `${index + 1}. ${item.fact}`
            ).join('\n\n');
            
            alert('üìñ Tes derni√®res r√©v√©lations scientifiques:\n\n' + historyText);
        };

        // Event listeners
        document.getElementById('newFact').addEventListener('click', showNewFact);
        document.getElementById('shareFact').addEventListener('click', shareFact);
        document.getElementById('factHistory').addEventListener('click', showHistory);
    }

    loadTchoinmeni(container) {
        const situations = [
            {
                text: "Aur√©lien Tchoinm√©ni doit choisir sa tenue pour un match important",
                choices: [
                    { text: "Maillot classique avec crampons discrets", points: 1, reaction: "Trop basique pour un roi ! üëë" },
                    { text: "Maillot + headband paillet√© + chaussettes roses", points: 3, reaction: "Voil√† le style qu'on veut voir ! ‚ú®" },
                    { text: "Maillot personnalis√© 'Tchoinm√©ni' avec strass", points: 5, reaction: "ICONIQUE ! Le stade va fondre ! üî•" }
                ]
            },
            {
                text: "Pendant l'√©chauffement, Aur√©lien doit montrer sa technique",
                choices: [
                    { text: "Jongles classiques", points: 1, reaction: "O√π est le show ? üò¥" },
                    { text: "Jongles en faisant des duck faces", points: 3, reaction: "Maintenant on parle ! üì∏" },
                    { text: "Jongles avec des paillettes qui sortent du ballon", points: 5, reaction: "MAGIQUE ! Tchoinm√©ni l'enchanteur ! ü¶Ñ" }
                ]
            },
            {
                text: "L'arbitre donne un carton jaune √† Aur√©lien",
                choices: [
                    { text: "Accepter en silence", points: 1, reaction: "Trop sage, o√π est le drama ? üôÑ" },
                    { text: "Faire un clin d'≈ìil √† l'arbitre", points: 3, reaction: "Charme level 100 ! üí´" },
                    { text: "Sortir un miroir de poche pour se recoiffer", points: 5, reaction: "Les priorit√©s sont claires ! üíÖ" }
                ]
            },
            {
                text: "Aur√©lien marque un but ! Comment c√©l√®bre-t-il ?",
                choices: [
                    { text: "Lever les bras classique", points: 1, reaction: "Bof... on a vu mieux üòê" },
                    { text: "Danse du ventre face aux supporters", points: 3, reaction: "Le public adore ! üï∫" },
                    { text: "Selfie avec le poteau de but", points: 5, reaction: "GENIUS ! Cette photo va faire le buzz ! üì±" }
                ]
            },
            {
                text: "Interview d'apr√®s match, que dit Aur√©lien ?",
                choices: [
                    { text: "On a bien jou√© en √©quipe", points: 1, reaction: "Basique... üò¥" },
                    { text: "Mes cheveux brillent autant que ma performance", points: 3, reaction: "Confidence level: maximum ! üíá‚Äç‚ôÇÔ∏è" },
                    { text: "Je d√©die ce match √† tous mes followers Instagram", points: 5, reaction: "Influenceur de l'ann√©e ! üèÜ" }
                ]
            }
        ];

        let currentSituation = 0;
        let totalScore = 0;
        let gameStarted = false;

        const showSituation = () => {
            if (currentSituation >= situations.length) {
                showFinalResult();
                return;
            }

            const situation = situations[currentSituation];
            container.innerHTML = `
                <div class="tchoinmeni-container">
                    <h2>‚öΩ Aur√©lien Tchoinm√©ni üíÖ</h2>
                    <div class="game-header">
                        <div class="score">Score Tchoin: ${totalScore}/25</div>
                        <div class="situation-counter">Situation ${currentSituation + 1}/${situations.length}</div>
                    </div>
                    <div class="player-avatar">
                        <div class="player-emoji">‚öΩüë®‚Äçü¶±üíÖ</div>
                        <div class="player-name">AUR√âLIEN TCHOINM√âNI</div>
                        <div class="player-subtitle">Le Milieu de Terrain le Plus Styl√© de la Galaxie</div>
                    </div>
                    <div class="situation-text">
                        <p>${situation.text}</p>
                    </div>
                    <div class="choices">
                        ${situation.choices.map((choice, index) => 
                            `<button class="choice-btn" data-index="${index}">
                                ${choice.text}
                            </button>`
                        ).join('')}
                    </div>
                    <div class="reaction" id="reaction" style="display: none;"></div>
                </div>
            `;

            // Add styles
            if (!document.getElementById('tchoinmeni-styles')) {
                const style = document.createElement('style');
                style.id = 'tchoinmeni-styles';
                style.textContent = `
                    .tchoinmeni-container { text-align: center; }
                    .game-header { display: flex; justify-content: space-between; margin: 1rem 0; font-size: 1.1rem; }
                    .player-avatar { margin: 2rem 0; }
                    .player-emoji { font-size: 4rem; margin: 1rem 0; }
                    .player-name { font-size: 1.8rem; font-weight: bold; color: #ff69b4; text-shadow: 0 0 10px #ff69b4; }
                    .player-subtitle { font-size: 1rem; margin: 0.5rem 0; opacity: 0.9; font-style: italic; }
                    .situation-text { background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 20px; margin: 2rem 0; font-size: 1.3rem; line-height: 1.6; }
                    .choices { display: grid; gap: 1rem; margin: 2rem 0; }
                    .choice-btn { padding: 1.5rem; border: none; border-radius: 15px; background: rgba(255,255,255,0.2); color: white; font-size: 1.1rem; cursor: pointer; transition: all 0.3s; text-align: left; }
                    .choice-btn:hover { background: rgba(255,255,255,0.3); transform: scale(1.02); }
                    .reaction { margin: 2rem 0; padding: 1rem; background: rgba(255,105,180,0.3); border-radius: 15px; font-size: 1.2rem; }
                    .final-result { margin: 2rem 0; }
                    .final-score { font-size: 3rem; color: #ffd700; text-shadow: 0 0 20px #ffd700; margin: 1rem 0; }
                    .final-title { font-size: 2rem; margin: 1rem 0; }
                    .final-description { font-size: 1.2rem; line-height: 1.6; margin: 1rem 0; }
                    .restart-btn { padding: 1rem 2rem; border: none; border-radius: 25px; background: linear-gradient(45deg, #ff69b4, #da70d6); color: white; font-size: 1rem; cursor: pointer; margin: 1rem; }
                `;
                document.head.appendChild(style);
            }

            // Add event listeners
            container.querySelectorAll('.choice-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const choiceIndex = parseInt(e.target.getAttribute('data-index'));
                    const choice = situation.choices[choiceIndex];
                    
                    totalScore += choice.points;
                    
                    // Show reaction
                    const reactionDiv = document.getElementById('reaction');
                    reactionDiv.textContent = choice.reaction;
                    reactionDiv.style.display = 'block';
                    
                    // Add visual feedback
                    if (choice.points >= 4) {
                        e.target.classList.add('success-flash');
                        this.playBeep(800, 300);
                    } else if (choice.points >= 2) {
                        this.playBeep(600, 200);
                    } else {
                        e.target.classList.add('error-shake');
                        this.playBeep(300, 200);
                    }

                    // Disable all buttons
                    container.querySelectorAll('.choice-btn').forEach(b => b.disabled = true);

                    setTimeout(() => {
                        currentSituation++;
                        showSituation();
                    }, 2500);
                });
            });
        };

        const showFinalResult = () => {
            let title, description, grade;
            
            if (totalScore >= 20) {
                title = "üèÜ L√âGENDE TCHOIN DU FOOTBALL ! üèÜ";
                description = "Aur√©lien Tchoinm√©ni sous ta direction est devenu l'ic√¥ne absolue ! M√™me Mbapp√© est jaloux de son style. Les supporters viennent au stade juste pour voir ses tenues !";
                grade = "S+ (Superstar Tchoin)";
            } else if (totalScore >= 15) {
                title = "‚≠ê STAR MONTANTE ! ‚≠ê";
                description = "Tr√®s belle performance ! Aur√©lien combine talent et style avec brio. Les m√©dias commencent √† parler de lui pour ses looks autant que ses buts !";
                grade = "A+ (Artiste Tchoin)";
            } else if (totalScore >= 10) {
                title = "üí´ POTENTIEL TCHOIN ! üí´";
                description = "Pas mal ! Aur√©lien a du style mais peut encore progresser. Il faut bosser le c√¥t√© spectacle pour devenir une vraie l√©gende !";
                grade = "B (Brave Tchoin)";
            } else if (totalScore >= 5) {
                title = "üå± APPRENTI TCHOIN ! üå±";
                description = "D√©but prometteur mais il faut du travail ! Aur√©lien joue bien mais manque de personnalit√©. Plus de paillettes, moins de timidit√© !";
                grade = "C (Candidat Tchoin)";
            } else {
                title = "üòÖ FORMATION INTENSIVE REQUISE ! üòÖ";
                description = "A√Øe... Aur√©lien joue comme un robot ! Il faut une transformation compl√®te : coach style + coach m√©dia + coach confiance en soi !";
                grade = "D (D√©butant Tchoin)";
            }

            container.innerHTML = `
                <div class="tchoinmeni-container">
                    <h2>‚öΩ R√©sultats Final ! üíÖ</h2>
                    <div class="final-result">
                        <div class="final-score">${totalScore}/25</div>
                        <div class="final-title">${title}</div>
                        <div class="final-description">${description}</div>
                        <div class="grade">Grade: ${grade}</div>
                        <button class="restart-btn" onclick="app.loadTchoinmeni(document.getElementById('game-content'))">
                            üîÑ Nouvelle Carri√®re
                        </button>
                        <button class="restart-btn" onclick="navigator.share && navigator.share({title: 'Mon score Aur√©lien Tchoinm√©ni', text: '${title} Score: ${totalScore}/25 sur Tchoinland.fun !', url: window.location.href})">
                            üì± Partager mon Score
                        </button>
                    </div>
                </div>
            `;
        };

        const startGame = () => {
            currentSituation = 0;
            totalScore = 0;
            gameStarted = true;
            showSituation();
        };

        // Show welcome screen
        container.innerHTML = `
            <div class="tchoinmeni-container">
                <h2>‚öΩ Aur√©lien Tchoinm√©ni üíÖ</h2>
                <div class="player-avatar">
                    <div class="player-emoji">‚öΩüë®‚Äçü¶±üíÖ</div>
                    <div class="player-name">AUR√âLIEN TCHOINM√âNI</div>
                    <div class="player-subtitle">Simulation de Carri√®re Ultra-Styl√©e</div>
                </div>
                <div class="game-description">
                    <p>Tu es le coach personnel d'Aur√©lien Tchoinm√©ni ! üéØ</p>
                    <p>Aide-le √† devenir la l√©gende la plus styl√©e du football en faisant les bons choix dans diff√©rentes situations.</p>
                    <p>Plus c'est spectaculaire et tchoin, plus tu gagnes de points ! ‚ú®</p>
                </div>
                <button class="restart-btn" onclick="app.loadTchoinmeni(document.getElementById('game-content')); setTimeout(() => app.loadTchoinmeni(document.getElementById('game-content')), 100)">
                    üöÄ Commencer la Carri√®re !
                </button>
            </div>
        `;

        // Auto-start after welcome
        setTimeout(() => {
            if (!gameStarted) {
                startGame();
            }
        }, 100);
    }



    // NOUVEAUX MINI-JEUX INTERACTIFS ! üéÆ‚ú®

    loadTchoinCatch(container) {
        let score = 0;
        let gameActive = false;
        let gameSpeed = 2000;
        let catchElements = [];

        container.innerHTML = `
            <div class="tchoin-catch-game">
                <h2>üíÖüéØ Catch the Tchoin</h2>
                <div class="game-info">
                    <div class="score-display">Score: <span id="catch-score">0</span></div>
                    <div class="lives-display">üíÑüíÑüíÑ</div>
                </div>
                <div class="catch-area" id="catch-area"></div>
                <button class="start-btn" id="start-catch">üöÄ Start Catching !</button>
                <div class="instructions">üëÜ Tape sur les tchoin qui tombent pour marquer des points ! üíÖ</div>
            </div>
        `;

        const catchArea = container.querySelector('#catch-area');
        const scoreEl = container.querySelector('#catch-score');
        const livesEl = container.querySelector('.lives-display');
        const startBtn = container.querySelector('#start-catch');
        
        const tchoinEmojis = ['üíÖ', 'üëë', 'üíÑ', '‚ú®', 'üíé', 'ü¶Ñ', 'üë©‚Äçü¶≥', 'üíã'];
        let lives = 3;

        const createFallingTchoin = () => {
            if (!gameActive) return;
            
            const tchoin = document.createElement('div');
            tchoin.className = 'falling-tchoin';
            tchoin.textContent = tchoinEmojis[Math.floor(Math.random() * tchoinEmojis.length)];
            tchoin.style.left = Math.random() * (catchArea.offsetWidth - 50) + 'px';
            tchoin.style.top = '-50px';
            tchoin.style.position = 'absolute';
            tchoin.style.fontSize = '2rem';
            tchoin.style.cursor = 'pointer';
            tchoin.style.userSelect = 'none';
            tchoin.style.transition = `top ${3000 + Math.random() * 2000}ms linear`;
            
            catchArea.appendChild(tchoin);
            catchElements.push(tchoin);

            // Animation de chute
            setTimeout(() => {
                tchoin.style.top = catchArea.offsetHeight + 'px';
            }, 10);

            // Clic pour attraper
            tchoin.addEventListener('click', () => {
                if (gameActive) {
                    score += 10;
                    scoreEl.textContent = score;
                    this.playBeep(600, 100);
                    
                    // Animation d'explosion
                    tchoin.style.transform = 'scale(2) rotate(360deg)';
                    tchoin.style.opacity = '0';
                    setTimeout(() => tchoin.remove(), 300);
                }
            });

            // Si pas attrap√©
            setTimeout(() => {
                if (tchoin.parentNode && gameActive) {
                    lives--;
                    this.playBeep(200, 300);
                    livesEl.textContent = 'üíÑ'.repeat(lives);
                    tchoin.remove();
                    
                    if (lives <= 0) {
                        endGame();
                    }
                }
            }, 5000);
        };

        const startGame = () => {
            gameActive = true;
            score = 0;
            lives = 3;
            scoreEl.textContent = '0';
            livesEl.textContent = 'üíÑüíÑüíÑ';
            startBtn.style.display = 'none';
            
            const gameInterval = setInterval(() => {
                if (!gameActive) {
                    clearInterval(gameInterval);
                    return;
                }
                createFallingTchoin();
                gameSpeed = Math.max(800, gameSpeed - 50); // Acc√©l√©ration progressive
            }, gameSpeed);
        };

        const endGame = () => {
            gameActive = false;
            catchElements.forEach(el => el.remove());
            catchElements = [];
            
            let message = "";
            if (score >= 200) {
                message = "üèÜ D√âESSE DU CATCH ! Tu es une machine √† attraper les tchoin ! üëë‚ú®";
            } else if (score >= 100) {
                message = "üíÖ EXCELLENTE TCHOINEUSE ! Tes r√©flexes sont au top ! üéØ";
            } else if (score >= 50) {
                message = "‚ú® PAS MAL DU TOUT ! Tu commences √† ma√Ætriser l'art du catch ! üíÑ";
            } else {
                message = "üòÖ IL FAUT S'ENTRA√éNER ! Les tchoin sont rapides mais tu peux faire mieux ! ü¶Ñ";
            }
            
            container.innerHTML += `
                <div class="game-over">
                    <h3>üéØ Game Over ! üéØ</h3>
                    <div class="final-score">Score final: ${score}</div>
                    <div class="result-message">${message}</div>
                    <button onclick="app.loadTchoinCatch(document.getElementById('game-content'))" class="replay-btn">üîÑ Rejouer</button>
                </div>
            `;
        };

        startBtn.addEventListener('click', startGame);

        // Styles CSS pour le jeu
        const style = document.createElement('style');
        style.textContent = `
            .tchoin-catch-game { text-align: center; padding: 1rem; }
            .catch-area { 
                position: relative; 
                height: 400px; 
                background: rgba(255,105,180,0.1); 
                border: 2px dashed rgba(255,255,255,0.5); 
                border-radius: 15px; 
                margin: 1rem 0; 
                overflow: hidden;
            }
            .game-info { display: flex; justify-content: space-between; margin: 1rem 0; }
            .falling-tchoin { z-index: 10; animation: wiggle 0.5s infinite; }
            .start-btn, .replay-btn { 
                background: rgba(255,105,180,0.3); 
                border: 2px solid rgba(255,255,255,0.5); 
                color: white; 
                padding: 1rem 2rem; 
                border-radius: 25px; 
                font-size: 1.2rem; 
                cursor: pointer; 
                margin: 1rem;
            }
            @keyframes wiggle { 0%, 100% { transform: rotate(0deg); } 50% { transform: rotate(5deg); } }
            .instructions { margin: 1rem 0; opacity: 0.8; font-size: 0.9rem; }
            .game-over { 
                background: rgba(255,105,180,0.2); 
                padding: 2rem; 
                border-radius: 15px; 
                margin: 1rem 0; 
            }
        `;
        document.head.appendChild(style);
    }

    loadTchoinMemory(container) {
        let cards = [];
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;
        let gameStarted = false;

        const tchoinEmojis = ['üíÖ', 'üëë', 'üíÑ', '‚ú®', 'üíé', 'ü¶Ñ', 'üíã', 'üéÄ'];
        const gameCards = [...tchoinEmojis, ...tchoinEmojis].sort(() => Math.random() - 0.5);

        container.innerHTML = `
            <div class="memory-game">
                <h2>üß†üíã Memory Tchoin</h2>
                <div class="game-stats">
                    <div>Moves: <span id="move-counter">0</span></div>
                    <div>Pairs: <span id="pair-counter">0</span>/8</div>
                </div>
                <div class="memory-grid" id="memory-grid"></div>
                <button class="shuffle-btn" id="shuffle-btn">üîÑ Nouvelle partie</button>
            </div>
        `;

        const grid = container.querySelector('#memory-grid');
        const moveCounter = container.querySelector('#move-counter');
        const pairCounter = container.querySelector('#pair-counter');
        const shuffleBtn = container.querySelector('#shuffle-btn');

        const createCards = () => {
            grid.innerHTML = '';
            gameCards.forEach((emoji, index) => {
                const card = document.createElement('div');
                card.className = 'memory-card';
                card.dataset.emoji = emoji;
                card.dataset.index = index;
                
                card.innerHTML = `
                    <div class="card-front">‚ùì</div>
                    <div class="card-back">${emoji}</div>
                `;
                
                card.addEventListener('click', flipCard);
                grid.appendChild(card);
                cards.push(card);
            });
        };

        const flipCard = (e) => {
            const card = e.currentTarget;
            
            if (card.classList.contains('flipped') || card.classList.contains('matched') || flippedCards.length >= 2) {
                return;
            }

            card.classList.add('flipped');
            flippedCards.push(card);
            this.playBeep(400, 100);

            if (flippedCards.length === 2) {
                moves++;
                moveCounter.textContent = moves;
                checkForMatch();
            }
        };

        const checkForMatch = () => {
            const [card1, card2] = flippedCards;
            const emoji1 = card1.dataset.emoji;
            const emoji2 = card2.dataset.emoji;

            setTimeout(() => {
                if (emoji1 === emoji2) {
                    // Match !
                    card1.classList.add('matched');
                    card2.classList.add('matched');
                    matchedPairs++;
                    pairCounter.textContent = matchedPairs;
                    this.playBeep(600, 200);

                    if (matchedPairs === 8) {
                        setTimeout(() => showResults(), 500);
                    }
                } else {
                    // Pas de match
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    this.playBeep(200, 200);
                }
                flippedCards = [];
            }, 1000);
        };

        const showResults = () => {
            let message = "";
            let title = "";
            
            if (moves <= 12) {
                title = "üß†üëë G√âNIE DE LA M√âMOIRE !";
                message = "INCROYABLE ! Tu as une m√©moire de tchoin l√©gendaire ! üèÜ‚ú®";
            } else if (moves <= 20) {
                title = "üíÖ EXCELLENTE M√âMOIRE !";
                message = "Bravo ! Ton cerveau fonctionne comme un bijou ! üíéüß†";
            } else if (moves <= 30) {
                title = "‚ú® BONNE PERFORMANCE !";
                message = "Pas mal du tout ! Tu ma√Ætrises l'art de la m√©morisation ! üéØ";
            } else {
                title = "üíÑ √Ä AM√âLIORER !";
                message = "Il faut travailler cette m√©moire ma belle ! Mais c'est d√©j√† un bon d√©but ! üòä";
            }

            container.innerHTML += `
                <div class="memory-results">
                    <h3>\${title}</h3>
                    <div class="final-stats">
                        <div>üéØ Mouvements: \${moves}</div>
                        <div>‚≠ê Performance: \${moves <= 12 ? 'Parfait' : moves <= 20 ? 'Excellent' : moves <= 30 ? 'Bien' : '√Ä am√©liorer'}</div>
                    </div>
                    <div class="result-message">\${message}</div>
                    <button onclick="app.loadTchoinMemory(document.getElementById('game-content'))" class="replay-btn">üîÑ Rejouer</button>
                </div>
            `;
        };

        const resetGame = () => {
            cards = [];
            flippedCards = [];
            matchedPairs = 0;
            moves = 0;
            moveCounter.textContent = '0';
            pairCounter.textContent = '0';
            createCards();
        };

        shuffleBtn.addEventListener('click', resetGame);
        createCards();

        // Styles CSS
        const style = document.createElement('style');
        style.textContent = `
            .memory-game { text-align: center; padding: 1rem; }
            .memory-grid { 
                display: grid; 
                grid-template-columns: repeat(4, 1fr); 
                gap: 10px; 
                max-width: 400px; 
                margin: 1rem auto; 
            }
            .memory-card { 
                aspect-ratio: 1; 
                background: rgba(255,105,180,0.3); 
                border: 2px solid rgba(255,255,255,0.5); 
                border-radius: 10px; 
                cursor: pointer; 
                position: relative; 
                transform-style: preserve-3d; 
                transition: transform 0.6s;
            }
            .memory-card.flipped { transform: rotateY(180deg); }
            .memory-card.matched { 
                background: rgba(0,255,0,0.3); 
                transform: scale(0.9); 
            }
            .card-front, .card-back { 
                position: absolute; 
                width: 100%; 
                height: 100%; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                font-size: 1.5rem; 
                backface-visibility: hidden; 
            }
            .card-back { transform: rotateY(180deg); }
            .game-stats { 
                display: flex; 
                justify-content: space-around; 
                margin: 1rem 0; 
                font-weight: bold; 
            }
            .shuffle-btn, .replay-btn { 
                background: rgba(255,105,180,0.3); 
                border: 2px solid rgba(255,255,255,0.5); 
                color: white; 
                padding: 0.8rem 1.5rem; 
                border-radius: 20px; 
                cursor: pointer; 
                margin: 1rem; 
            }
            .memory-results { 
                background: rgba(255,105,180,0.2); 
                padding: 2rem; 
                border-radius: 15px; 
                margin: 1rem 0; 
            }
            @media (max-width: 480px) {
                .memory-grid { max-width: 300px; }
                .card-front, .card-back { font-size: 1.2rem; }
            }
        `;
        document.head.appendChild(style);
    }

    loadTchoinTap(container) {
        let score = 0;
        let timeLeft = 30;
        let gameActive = false;
        let tapInterval;
        let countdownInterval;

        container.innerHTML = `
            <div class="tap-game">
                <h2>üëÜ‚ú® Tap Tap Tchoin</h2>
                <div class="tap-stats">
                    <div class="score">Score: <span id="tap-score">0</span></div>
                    <div class="timer">Temps: <span id="tap-timer">30</span>s</div>
                </div>
                <div class="tap-area" id="tap-area">
                    <div class="tap-target" id="tap-target">üíÖ</div>
                </div>
                <button class="start-tap-btn" id="start-tap">üöÄ Start Tapping !</button>
                <div class="tap-instructions">üëÜ Tape le plus vite possible sur l'emoji ! Plus tu tapes vite, plus tu gagnes de points ! üíÖ‚ö°</div>
            </div>
        `;

        const scoreEl = container.querySelector('#tap-score');
        const timerEl = container.querySelector('#tap-timer');
        const tapTarget = container.querySelector('#tap-target');
        const tapArea = container.querySelector('#tap-area');
        const startBtn = container.querySelector('#start-tap');

        const tchoinEmojis = ['üíÖ', 'üëë', 'üíÑ', '‚ú®', 'üíé', 'ü¶Ñ', 'üíã', 'üéÄ', 'üë©‚Äçü¶≥', 'üíñ'];
        let tapCount = 0;
        let lastTapTime = 0;

        const changeEmoji = () => {
            tapTarget.textContent = tchoinEmojis[Math.floor(Math.random() * tchoinEmojis.length)];
        };

        const onTap = () => {
            if (!gameActive) return;
            
            tapCount++;
            const currentTime = Date.now();
            const timeDiff = currentTime - lastTapTime;
            
            // Bonus pour vitesse
            let points = 1;
            if (timeDiff < 200) points = 3; // Tr√®s rapide
            else if (timeDiff < 400) points = 2; // Rapide
            
            score += points;
            scoreEl.textContent = score;
            lastTapTime = currentTime;
            
            // Effets visuels
            this.playBeep(400 + Math.random() * 400, 50);
            tapTarget.style.transform = 'scale(1.3) rotate(15deg)';
            tapTarget.style.background = `hsl(\${Math.random() * 360}, 70%, 70%)`;
            
            setTimeout(() => {
                tapTarget.style.transform = 'scale(1) rotate(0deg)';
                tapTarget.style.background = 'transparent';
            }, 100);
            
            changeEmoji();
            
            // Animation de score
            const scorePopup = document.createElement('div');
            scorePopup.textContent = `+\${points}`;
            scorePopup.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                color: #fff;
                font-size: 1.5rem;
                font-weight: bold;
                pointer-events: none;
                animation: scoreFloat 1s ease-out forwards;
            `;
            tapArea.appendChild(scorePopup);
            setTimeout(() => scorePopup.remove(), 1000);
        };

        const startGame = () => {
            gameActive = true;
            score = 0;
            timeLeft = 30;
            tapCount = 0;
            lastTapTime = Date.now();
            scoreEl.textContent = '0';
            startBtn.style.display = 'none';
            
            countdownInterval = setInterval(() => {
                timeLeft--;
                timerEl.textContent = timeLeft;
                
                if (timeLeft <= 0) {
                    endGame();
                }
            }, 1000);
            
            // Changer d'emoji p√©riodiquement
            tapInterval = setInterval(changeEmoji, 1000);
        };

        const endGame = () => {
            gameActive = false;
            clearInterval(countdownInterval);
            clearInterval(tapInterval);
            
            const tps = (tapCount / 30).toFixed(1); // Taps per second
            
            let message = "";
            let title = "";
            
            if (score >= 200) {
                title = "üëë D√âESSE DU TAP !";
                message = `INCROYABLE ! \${tps} taps/sec ! Tes doigts sont des missiles ! üöÄüíÖ`;
            } else if (score >= 150) {
                title = "‚ö° SPEED DEMON !";
                message = `EXCELLENT ! \${tps} taps/sec ! Tu as des doigts magiques ! ‚ú®üëÜ`;
            } else if (score >= 100) {
                title = "üíÑ BONNE VITESSE !";
                message = `Pas mal ! \${tps} taps/sec ! Tu commences √† ma√Ætriser ! üéØ`;
            } else if (score >= 50) {
                title = "ü¶Ñ D√âBUTANTE PROMETTEUSE !";
                message = `C'est un d√©but ! \${tps} taps/sec ! Il faut s'entra√Æner ! üí™`;
            } else {
                title = "üòÖ SLOW MOTION !";
                message = `\${tps} taps/sec... Es-tu s√ªre que tes doigts fonctionnent ? üòÇüíÖ`;
            }

            container.innerHTML += `
                <div class="tap-results">
                    <h3>\${title}</h3>
                    <div class="final-stats">
                        <div>üéØ Score: \${score} points</div>
                        <div>üëÜ Taps: \${tapCount}</div>
                        <div>‚ö° Vitesse: \${tps} taps/sec</div>
                    </div>
                    <div class="result-message">\${message}</div>
                    <button onclick="app.loadTchoinTap(document.getElementById('game-content'))" class="replay-btn">üîÑ Rejouer</button>
                </div>
            `;
        };

        tapTarget.addEventListener('click', onTap);
        tapTarget.addEventListener('touchstart', onTap);
        startBtn.addEventListener('click', startGame);

        // Styles CSS
        const style = document.createElement('style');
        style.textContent = `
            .tap-game { text-align: center; padding: 1rem; }
            .tap-area { 
                position: relative;
                height: 300px; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                margin: 2rem auto; 
                background: rgba(255,105,180,0.1); 
                border: 3px dashed rgba(255,255,255,0.5); 
                border-radius: 20px;
                max-width: 400px;
            }
            .tap-target { 
                font-size: 4rem; 
                cursor: pointer; 
                user-select: none; 
                transition: transform 0.1s, background 0.1s;
                padding: 1rem;
                border-radius: 50%;
                background: transparent;
            }
            .tap-target:hover { transform: scale(1.1); }
            .tap-stats { 
                display: flex; 
                justify-content: space-around; 
                margin: 1rem 0; 
                font-weight: bold; 
                font-size: 1.2rem;
            }
            .start-tap-btn, .replay-btn { 
                background: rgba(255,105,180,0.3); 
                border: 2px solid rgba(255,255,255,0.5); 
                color: white; 
                padding: 1rem 2rem; 
                border-radius: 25px; 
                font-size: 1.2rem; 
                cursor: pointer; 
                margin: 1rem;
            }
            .tap-instructions { 
                margin: 1rem 0; 
                opacity: 0.8; 
                font-size: 0.9rem; 
                max-width: 400px;
                margin-left: auto;
                margin-right: auto;
            }
            .tap-results { 
                background: rgba(255,105,180,0.2); 
                padding: 2rem; 
                border-radius: 15px; 
                margin: 1rem 0; 
            }
            @keyframes scoreFloat { 
                0% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                100% { opacity: 0; transform: translate(-50%, -100%) scale(1.5); }
            }
        `;
        document.head.appendChild(style);
    }


    scheduleRandomPhoto() {
        // Attendre entre 30 et 60 secondes avant la prochaine photo (plus espac√© pour √©viter les erreurs)
        const randomDelay = 30000 + Math.random() * 30000;
        
        setTimeout(() => {
            this.showRandomPhoto();
            this.scheduleRandomPhoto(); // Programmer la prochaine
        }, randomDelay);
    }

    showRandomPhoto() {
        const photoContainer = document.getElementById('photo-flash-container');
        if (!photoContainer) return;

        // Choisir une photo al√©atoire
        const randomPhoto = this.photoList[Math.floor(Math.random() * this.photoList.length)];
        const photoPath = `photos/${encodeURIComponent(randomPhoto)}`;
        
        console.log('üì∏‚ú® Affichage photo flash:', randomPhoto);

        // D√©finir l'image de fond
        photoContainer.style.backgroundImage = `url('${photoPath}')`;
        
        // Afficher avec effet fade in
        photoContainer.style.opacity = '1';
        
        // Son de flash photo
        this.playBeep(800, 100);
        setTimeout(() => this.playBeep(600, 80), 100);
        
        // Masquer apr√®s 1.5 secondes
        setTimeout(() => {
            photoContainer.style.opacity = '0';
            
            // Nettoyer l'image apr√®s la transition
            setTimeout(() => {
                photoContainer.style.backgroundImage = '';
            }, 300);
        }, 1500);
    }


    loadSpaceInvaders(container) {
        let gameState = {
            running: false,
            paused: false,
            player: { x: 200, y: 350, width: 30, height: 20, speed: 5 },
            bullets: [],
            invaders: [],
            invaderBullets: [],
            score: 0,
            lives: 3,
            level: 1,
            invaderSpeed: 1,
            invaderDirection: 1
        };

        container.innerHTML = `
            <div class="space-invaders-game">
                <h2>üëæüíÖ Space Invaders Tchoin</h2>
                <div class="game-stats">
                    <div class="stat">Score: <span id="space-score">0</span></div>
                    <div class="stat">Lives: <span id="space-lives">3</span></div>
                    <div class="stat">Level: <span id="space-level">1</span></div>
                </div>
                <canvas id="space-canvas" width="400" height="400"></canvas>
                <div class="space-controls">
                    <button id="space-start" class="space-btn">üöÄ Start Game</button>
                    <button id="space-pause" class="space-btn" style="display: none;">‚è∏Ô∏è Pause</button>
                </div>
                <div class="mobile-space-controls">
                    <button class="space-control-btn" data-action="left">‚¨ÖÔ∏è</button>
                    <button class="space-control-btn" data-action="shoot">üî´</button>
                    <button class="space-control-btn" data-action="right">‚û°Ô∏è</button>
                </div>
                <div class="space-instructions">
                    üéÆ Fl√®ches pour bouger, ESPACE pour tirer !<br>
                    üëæ D√©truis tous les envahisseurs tchoin ! üíÖ‚ú®
                </div>
            </div>
        `;

        const canvas = container.querySelector('#space-canvas');
        const ctx = canvas.getContext('2d');
        const scoreEl = container.querySelector('#space-score');
        const livesEl = container.querySelector('#space-lives');
        const levelEl = container.querySelector('#space-level');
        const startBtn = container.querySelector('#space-start');
        const pauseBtn = container.querySelector('#space-pause');

        // Emojis pour le jeu
        const playerEmoji = 'ü¶Ñ';
        const invaderEmojis = ['üëæ', 'üíÖ', 'üëë', 'üíÑ', '‚ú®'];
        const bulletEmoji = 'üíé';
        const invaderBulletEmoji = 'üíî';

        const keys = {
            left: false,
            right: false,
            space: false
        };

        // Initialiser les envahisseurs
        const initInvaders = () => {
            gameState.invaders = [];
            const rows = 5;
            const cols = 8;
            const invaderWidth = 25;
            const invaderHeight = 25;
            const startX = 50;
            const startY = 50;

            for (let row = 0; row < rows; row++) {
                for (let col = 0; col < cols; col++) {
                    gameState.invaders.push({
                        x: startX + col * (invaderWidth + 10),
                        y: startY + row * (invaderHeight + 10),
                        width: invaderWidth,
                        height: invaderHeight,
                        emoji: invaderEmojis[row % invaderEmojis.length],
                        alive: true
                    });
                }
            }
        };

        const drawPlayer = () => {
            ctx.font = '20px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(playerEmoji, gameState.player.x + gameState.player.width/2, gameState.player.y + gameState.player.height);
        };

        const drawInvaders = () => {
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            gameState.invaders.forEach(invader => {
                if (invader.alive) {
                    ctx.fillText(invader.emoji, invader.x + invader.width/2, invader.y + invader.height);
                }
            });
        };

        const drawBullets = () => {
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            
            // Balles du joueur
            gameState.bullets.forEach(bullet => {
                ctx.fillText(bulletEmoji, bullet.x, bullet.y);
            });
            
            // Balles des envahisseurs
            gameState.invaderBullets.forEach(bullet => {
                ctx.fillText(invaderBulletEmoji, bullet.x, bullet.y);
            });
        };

        const updatePlayer = () => {
            if (keys.left && gameState.player.x > 0) {
                gameState.player.x -= gameState.player.speed;
            }
            if (keys.right && gameState.player.x < canvas.width - gameState.player.width) {
                gameState.player.x += gameState.player.speed;
            }
        };

        const updateBullets = () => {
            // Balles du joueur
            gameState.bullets = gameState.bullets.filter(bullet => {
                bullet.y -= 8;
                return bullet.y > 0;
            });
            
            // Balles des envahisseurs
            gameState.invaderBullets = gameState.invaderBullets.filter(bullet => {
                bullet.y += 3;
                return bullet.y < canvas.height;
            });
        };

        const updateInvaders = () => {
            let changeDirection = false;
            
            // V√©rifier les bords
            gameState.invaders.forEach(invader => {
                if (invader.alive) {
                    if (invader.x <= 0 || invader.x >= canvas.width - invader.width) {
                        changeDirection = true;
                    }
                }
            });
            
            if (changeDirection) {
                gameState.invaderDirection *= -1;
                gameState.invaders.forEach(invader => {
                    if (invader.alive) {
                        invader.y += 20; // Descendre
                    }
                });
            }
            
            // D√©placer les envahisseurs
            gameState.invaders.forEach(invader => {
                if (invader.alive) {
                    invader.x += gameState.invaderSpeed * gameState.invaderDirection;
                }
            });
            
            // Tirs al√©atoires des envahisseurs
            if (Math.random() < 0.005) {
                const aliveInvaders = gameState.invaders.filter(inv => inv.alive);
                if (aliveInvaders.length > 0) {
                    const shooter = aliveInvaders[Math.floor(Math.random() * aliveInvaders.length)];
                    gameState.invaderBullets.push({
                        x: shooter.x + shooter.width/2,
                        y: shooter.y + shooter.height
                    });
                }
            }
        };

        const checkCollisions = () => {
            // Balles du joueur vs envahisseurs
            gameState.bullets.forEach((bullet, bulletIndex) => {
                gameState.invaders.forEach((invader, invaderIndex) => {
                    if (invader.alive && 
                        bullet.x > invader.x && bullet.x < invader.x + invader.width &&
                        bullet.y > invader.y && bullet.y < invader.y + invader.height) {
                        
                        // Collision d√©tect√©e
                        invader.alive = false;
                        gameState.bullets.splice(bulletIndex, 1);
                        gameState.score += 10;
                        scoreEl.textContent = gameState.score;
                        this.playBeep(800, 100);
                    }
                });
            });
            
            // Balles des envahisseurs vs joueur
            gameState.invaderBullets.forEach((bullet, bulletIndex) => {
                if (bullet.x > gameState.player.x && bullet.x < gameState.player.x + gameState.player.width &&
                    bullet.y > gameState.player.y && bullet.y < gameState.player.y + gameState.player.height) {
                    
                    // Joueur touch√©
                    gameState.invaderBullets.splice(bulletIndex, 1);
                    gameState.lives--;
                    livesEl.textContent = gameState.lives;
                    this.playBeep(300, 300);
                    
                    if (gameState.lives <= 0) {
                        gameOver();
                    }
                }
            });
            
            // V√©rifier si tous les envahisseurs sont morts
            const aliveInvaders = gameState.invaders.filter(inv => inv.alive);
            if (aliveInvaders.length === 0) {
                nextLevel();
            }
            
            // V√©rifier si les envahisseurs atteignent le joueur
            gameState.invaders.forEach(invader => {
                if (invader.alive && invader.y + invader.height >= gameState.player.y) {
                    gameOver();
                }
            });
        };

        const shoot = () => {
            if (gameState.running && !gameState.paused) {
                gameState.bullets.push({
                    x: gameState.player.x + gameState.player.width/2,
                    y: gameState.player.y
                });
                this.playBeep(600, 50);
            }
        };

        const draw = () => {
            // Fond √©toil√©
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, 'rgba(25, 25, 112, 1)');
            gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // √âtoiles
            ctx.fillStyle = 'white';
            for (let i = 0; i < 50; i++) {
                const x = (i * 37) % canvas.width;
                const y = (i * 17) % canvas.height;
                ctx.fillRect(x, y, 1, 1);
            }
            
            drawPlayer();
            drawInvaders();
            drawBullets();
        };

        const gameLoop = () => {
            if (!gameState.running || gameState.paused) return;
            
            updatePlayer();
            updateBullets();
            updateInvaders();
            checkCollisions();
            draw();
            
            requestAnimationFrame(gameLoop);
        };

        const startGame = () => {
            gameState.running = true;
            gameState.paused = false;
            gameState.score = 0;
            gameState.lives = 3;
            gameState.level = 1;
            gameState.bullets = [];
            gameState.invaderBullets = [];
            gameState.player.x = 200;
            
            scoreEl.textContent = '0';
            livesEl.textContent = '3';
            levelEl.textContent = '1';
            
            initInvaders();
            startBtn.style.display = 'none';
            pauseBtn.style.display = 'block';
            
            gameLoop();
        };

        const pauseGame = () => {
            gameState.paused = !gameState.paused;
            if (gameState.paused) {
                pauseBtn.textContent = '‚ñ∂Ô∏è Play';
            } else {
                pauseBtn.textContent = '‚è∏Ô∏è Pause';
                gameLoop();
            }
        };

        const nextLevel = () => {
            gameState.level++;
            gameState.invaderSpeed += 0.5;
            levelEl.textContent = gameState.level;
            initInvaders();
            this.playBeep(1000, 200);
            
            // Message de niveau
            setTimeout(() => {
                alert(`üéâ NIVEAU ${gameState.level} ! üéâ\nLes envahisseurs tchoin deviennent plus agressifs ! üëæüíÖ`);
            }, 100);
        };

        const gameOver = () => {
            gameState.running = false;
            startBtn.style.display = 'block';
            pauseBtn.style.display = 'none';
            startBtn.textContent = 'üîÑ Rejouer';
            
            this.playBeep(200, 500);
            
            const highScore = localStorage.getItem('spaceInvadersHighScore') || 0;
            if (gameState.score > highScore) {
                localStorage.setItem('spaceInvadersHighScore', gameState.score);
                setTimeout(() => {
                    alert(`üèÜ NOUVEAU RECORD GALACTIQUE ! üèÜ\nScore: ${gameState.score} points\nTu es officiellement la d√©fenseuse de l'univers tchoin ! üëæüíÖ‚ú®`);
                }, 100);
            } else {
                let message = "";
                if (gameState.score >= 500) {
                    message = `üëæüíÖ COMMANDANTE SUPR√äME ! ${gameState.score} points ! Tu as sauv√© la galaxie ! üåå‚ú®`;
                } else if (gameState.score >= 300) {
                    message = `üöÄ PILOTE √âLITE ! ${gameState.score} points ! L'espace te respecte ! üëë`;
                } else if (gameState.score >= 100) {
                    message = `‚≠ê GUERRI√àRE PROMETTEUSE ! ${gameState.score} points ! Continue l'entra√Ænement ! üí™`;
                } else {
                    message = `üëæ RECRUE SPATIALE ! ${gameState.score} points ! L'univers a besoin de toi ! ü¶Ñüí´`;
                }
                setTimeout(() => alert(message), 100);
            }
        };

        // Event listeners
        startBtn.addEventListener('click', startGame);
        pauseBtn.addEventListener('click', pauseGame);

        // Contr√¥les clavier
        document.addEventListener('keydown', (e) => {
            if (!gameState.running) return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    e.preventDefault();
                    keys.left = true;
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    keys.right = true;
                    break;
                case ' ':
                    e.preventDefault();
                    shoot();
                    break;
            }
        });

        document.addEventListener('keyup', (e) => {
            switch(e.key) {
                case 'ArrowLeft':
                    keys.left = false;
                    break;
                case 'ArrowRight':
                    keys.right = false;
                    break;
            }
        });

        // Contr√¥les tactiles
        container.querySelectorAll('.space-control-btn').forEach(btn => {
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                const action = btn.dataset.action;
                switch(action) {
                    case 'left':
                        keys.left = true;
                        break;
                    case 'right':
                        keys.right = true;
                        break;
                    case 'shoot':
                        shoot();
                        break;
                }
            });

            btn.addEventListener('touchend', (e) => {
                e.preventDefault();
                const action = btn.dataset.action;
                switch(action) {
                    case 'left':
                        keys.left = false;
                        break;
                    case 'right':
                        keys.right = false;
                        break;
                }
            });
        });

        // Styles CSS
        const style = document.createElement('style');
        style.textContent = `
            .space-invaders-game { 
                text-align: center; 
                padding: 1rem; 
                user-select: none;
            }
            .game-stats { 
                display: flex; 
                justify-content: space-around; 
                margin: 1rem 0; 
                font-size: 1.1rem; 
                font-weight: bold;
            }
            #space-canvas { 
                border: 3px solid rgba(255, 105, 180, 0.5); 
                border-radius: 15px; 
                background: black; 
                margin: 1rem 0;
                max-width: 100%;
                height: auto;
            }
            .space-controls { 
                margin: 1rem 0; 
            }
            .space-btn { 
                background: rgba(255, 105, 180, 0.3); 
                border: 2px solid rgba(255, 255, 255, 0.5); 
                color: white; 
                padding: 1rem 2rem; 
                border-radius: 25px; 
                font-size: 1.2rem; 
                cursor: pointer; 
                margin: 0.5rem;
                transition: all 0.3s;
            }
            .space-btn:hover { 
                background: rgba(255, 105, 180, 0.5); 
                transform: scale(1.05);
            }
            .mobile-space-controls { 
                display: flex; 
                justify-content: center;
                gap: 1rem; 
                margin: 1rem auto;
                max-width: 300px;
            }
            .space-control-btn { 
                background: rgba(255, 105, 180, 0.3); 
                border: 2px solid rgba(255, 255, 255, 0.5); 
                color: white; 
                width: 60px; 
                height: 60px; 
                border-radius: 15px; 
                font-size: 1.5rem; 
                cursor: pointer;
                transition: all 0.2s;
                touch-action: manipulation;
            }
            .space-control-btn:hover, .space-control-btn:active { 
                background: rgba(255, 105, 180, 0.6); 
                transform: scale(1.1);
            }
            .space-instructions { 
                margin: 1rem 0; 
                opacity: 0.8; 
                font-size: 0.9rem; 
                max-width: 400px;
                margin-left: auto;
                margin-right: auto;
                line-height: 1.4;
            }
            @media (max-width: 480px) {
                #space-canvas { 
                    width: 100%; 
                    max-width: 350px;
                }
                .game-stats { 
                    font-size: 0.9rem; 
                }
                .space-control-btn { 
                    width: 50px; 
                    height: 50px; 
                    font-size: 1.3rem;
                }
            }
        `;
        document.head.appendChild(style);

        // Dessiner l'√©tat initial
        draw();
    }
}

// Add the flash animation CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes flash { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }
    @keyframes sparkle-fade { 
        0% { opacity: 1; transform: translateY(0) rotate(0deg); } 
        100% { opacity: 0; transform: translateY(-50px) rotate(180deg); } 
    }
`;
document.head.appendChild(style);

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.app = new TchoinlandApp();
});

// PWA service worker registration
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('sw.js')
            .then(registration => console.log('SW registered'))
            .catch(error => console.log('SW registration failed'));
    });
}